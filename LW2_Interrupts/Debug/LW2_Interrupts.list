
LW2_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  4 .ARM          00000000  08000490  08000490  00010498  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000490  08000498  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000490  08000490  00010490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00010498  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a4d  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a8  00000000  00000000  00010f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000110c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006be  00000000  00000000  0002b99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bd9c  00000000  00000000  0002c05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7df9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000150  00000000  00000000  000c7e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000478 	.word	0x08000478

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000478 	.word	0x08000478

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void task_2_interrupt();
void task_3();
void task_3_interrupt();

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//task_1();
	//task_2();
	task_3();
 8000258:	f000 f80a 	bl	8000270 <task_3>
 800025c:	2300      	movs	r3, #0
}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
	//task_1_interrupt();
	//task_2_interrupt();
	task_3_interrupt();
 8000266:	f000 f84b 	bl	8000300 <task_3_interrupt>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <task_3>:

	EXTI->PR1 = EXTI_PR1_PIF14;
}

void task_3()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 8000274:	4b1d      	ldr	r3, [pc, #116]	; (80002ec <task_3+0x7c>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a1c      	ldr	r2, [pc, #112]	; (80002ec <task_3+0x7c>)
 800027a:	f043 030a 	orr.w	r3, r3, #10
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000280:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <task_3+0x7c>)
 8000282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000284:	4a19      	ldr	r2, [pc, #100]	; (80002ec <task_3+0x7c>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6613      	str	r3, [r2, #96]	; 0x60

	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB
 800028c:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <task_3+0x80>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a17      	ldr	r2, [pc, #92]	; (80002f0 <task_3+0x80>)
 8000292:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000296:	f043 0311 	orr.w	r3, r3, #17
 800029a:	6153      	str	r3, [r2, #20]
					   | SYSCFG_EXTICR4_EXTI13_PB
					   | SYSCFG_EXTICR4_EXTI14_PB
					   | SYSCFG_EXTICR4_EXTI15_PB;

    EXTI->IMR1 |= EXTI_IMR1_IM12
 800029c:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <task_3+0x84>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <task_3+0x84>)
 80002a2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002a6:	6013      	str	r3, [r2, #0]
    			| EXTI_IMR1_IM13
				| EXTI_IMR1_IM14
				| EXTI_IMR1_IM15;

    EXTI->FTSR1 |= EXTI_FTSR1_FT12
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <task_3+0x84>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <task_3+0x84>)
 80002ae:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002b2:	60d3      	str	r3, [r2, #12]
    			 | EXTI_FTSR1_FT13
				 | EXTI_FTSR1_FT14
				 | EXTI_FTSR1_FT15;

    EXTI->RTSR1 |= EXTI_RTSR1_RT12
 80002b4:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <task_3+0x84>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	; (80002f4 <task_3+0x84>)
 80002ba:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002be:	6093      	str	r3, [r2, #8]
    			 | EXTI_RTSR1_RT13
				 | EXTI_RTSR1_RT14
				 | EXTI_RTSR1_RT15;

    NVIC_EnableIRQ( EXTI15_10_IRQn );
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f7ff ffa9 	bl	8000218 <__NVIC_EnableIRQ>

    GPIOB->MODER &= ~(GPIO_MODER_MODE12
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <task_3+0x88>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <task_3+0x88>)
 80002cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002d0:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);

    GPIOD->MODER &= ~(GPIO_MODER_MODE13
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <task_3+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a09      	ldr	r2, [pc, #36]	; (80002fc <task_3+0x8c>)
 80002d8:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80002dc:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE12
					| GPIO_MODER_MODE11
					| GPIO_MODER_MODE10);
    GPIOD->MODER |= 1 << GPIO_MODER_MODE13_Pos
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <task_3+0x8c>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a06      	ldr	r2, [pc, #24]	; (80002fc <task_3+0x8c>)
 80002e4:	f043 63aa 	orr.w	r3, r3, #89128960	; 0x5500000
 80002e8:	6013      	str	r3, [r2, #0]
    			  | 1 << GPIO_MODER_MODE12_Pos
				  | 1 << GPIO_MODER_MODE11_Pos
				  | 1 << GPIO_MODER_MODE10_Pos;

	while(1)
 80002ea:	e7fe      	b.n	80002ea <task_3+0x7a>
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010000 	.word	0x40010000
 80002f4:	40010400 	.word	0x40010400
 80002f8:	48000400 	.word	0x48000400
 80002fc:	48000c00 	.word	0x48000c00

08000300 <task_3_interrupt>:

	}
}

void task_3_interrupt()
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
    if(EXTI->PR1 & EXTI_PR1_PIF12)
 8000304:	4b32      	ldr	r3, [pc, #200]	; (80003d0 <task_3_interrupt+0xd0>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d013      	beq.n	8000338 <task_3_interrupt+0x38>
    {
    	if((GPIOB->IDR & GPIO_IDR_ID12) == 0)
 8000310:	4b30      	ldr	r3, [pc, #192]	; (80003d4 <task_3_interrupt+0xd4>)
 8000312:	691b      	ldr	r3, [r3, #16]
 8000314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000318:	2b00      	cmp	r3, #0
 800031a:	d104      	bne.n	8000326 <task_3_interrupt+0x26>
    	{
    		GPIOD->BSRR = GPIO_BSRR_BS13;
 800031c:	4b2e      	ldr	r3, [pc, #184]	; (80003d8 <task_3_interrupt+0xd8>)
 800031e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	e003      	b.n	800032e <task_3_interrupt+0x2e>
    	}
    	else
    	{
    		GPIOD->BSRR = GPIO_BSRR_BR13;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <task_3_interrupt+0xd8>)
 8000328:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800032c:	619a      	str	r2, [r3, #24]
    	}

        EXTI->PR1 = EXTI_PR1_PIF12;
 800032e:	4b28      	ldr	r3, [pc, #160]	; (80003d0 <task_3_interrupt+0xd0>)
 8000330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000334:	615a      	str	r2, [r3, #20]
    		GPIOD->BSRR = GPIO_BSRR_BR10;
    	}

		EXTI->PR1 = EXTI_PR1_PIF15;
	}
}
 8000336:	e046      	b.n	80003c6 <task_3_interrupt+0xc6>
    else if (EXTI->PR1 & EXTI_PR1_PIF13)
 8000338:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <task_3_interrupt+0xd0>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000340:	2b00      	cmp	r3, #0
 8000342:	d013      	beq.n	800036c <task_3_interrupt+0x6c>
    	if((GPIOB->IDR & GPIO_IDR_ID13) == 0)
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <task_3_interrupt+0xd4>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800034c:	2b00      	cmp	r3, #0
 800034e:	d104      	bne.n	800035a <task_3_interrupt+0x5a>
    		GPIOD->BSRR = GPIO_BSRR_BS12;
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <task_3_interrupt+0xd8>)
 8000352:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000356:	619a      	str	r2, [r3, #24]
 8000358:	e003      	b.n	8000362 <task_3_interrupt+0x62>
    		GPIOD->BSRR = GPIO_BSRR_BR12;
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <task_3_interrupt+0xd8>)
 800035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000360:	619a      	str	r2, [r3, #24]
        EXTI->PR1 = EXTI_PR1_PIF13;
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <task_3_interrupt+0xd0>)
 8000364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000368:	615a      	str	r2, [r3, #20]
}
 800036a:	e02c      	b.n	80003c6 <task_3_interrupt+0xc6>
    else if (EXTI->PR1 & EXTI_PR1_PIF14)
 800036c:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <task_3_interrupt+0xd0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d013      	beq.n	80003a0 <task_3_interrupt+0xa0>
    	if((GPIOB->IDR & GPIO_IDR_ID14) == 0)
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <task_3_interrupt+0xd4>)
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000380:	2b00      	cmp	r3, #0
 8000382:	d104      	bne.n	800038e <task_3_interrupt+0x8e>
    		GPIOD->BSRR = GPIO_BSRR_BS11;
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <task_3_interrupt+0xd8>)
 8000386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800038a:	619a      	str	r2, [r3, #24]
 800038c:	e003      	b.n	8000396 <task_3_interrupt+0x96>
    		GPIOD->BSRR = GPIO_BSRR_BR11;
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <task_3_interrupt+0xd8>)
 8000390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000394:	619a      	str	r2, [r3, #24]
		EXTI->PR1 = EXTI_PR1_PIF14;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <task_3_interrupt+0xd0>)
 8000398:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800039c:	615a      	str	r2, [r3, #20]
}
 800039e:	e012      	b.n	80003c6 <task_3_interrupt+0xc6>
    	if((GPIOB->IDR & GPIO_IDR_ID15) == 0)
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <task_3_interrupt+0xd4>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d104      	bne.n	80003b6 <task_3_interrupt+0xb6>
    		GPIOD->BSRR = GPIO_BSRR_BS10;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <task_3_interrupt+0xd8>)
 80003ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003b2:	619a      	str	r2, [r3, #24]
 80003b4:	e003      	b.n	80003be <task_3_interrupt+0xbe>
    		GPIOD->BSRR = GPIO_BSRR_BR10;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <task_3_interrupt+0xd8>)
 80003b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003bc:	619a      	str	r2, [r3, #24]
		EXTI->PR1 = EXTI_PR1_PIF15;
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <task_3_interrupt+0xd0>)
 80003c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80003c4:	615a      	str	r2, [r3, #20]
}
 80003c6:	bf00      	nop
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40010400 	.word	0x40010400
 80003d4:	48000400 	.word	0x48000400
 80003d8:	48000c00 	.word	0x48000c00

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 f811 	bl	8000430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff21 	bl	8000254 <main>

08000412 <LoopForever>:

LoopForever:
    b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000420:	08000498 	.word	0x08000498
  ldr r2, =_sbss
 8000424:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000428:	2000001c 	.word	0x2000001c

0800042c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC1_2_IRQHandler>
	...

08000430 <__libc_init_array>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	4d0d      	ldr	r5, [pc, #52]	; (8000468 <__libc_init_array+0x38>)
 8000434:	4c0d      	ldr	r4, [pc, #52]	; (800046c <__libc_init_array+0x3c>)
 8000436:	1b64      	subs	r4, r4, r5
 8000438:	10a4      	asrs	r4, r4, #2
 800043a:	2600      	movs	r6, #0
 800043c:	42a6      	cmp	r6, r4
 800043e:	d109      	bne.n	8000454 <__libc_init_array+0x24>
 8000440:	4d0b      	ldr	r5, [pc, #44]	; (8000470 <__libc_init_array+0x40>)
 8000442:	4c0c      	ldr	r4, [pc, #48]	; (8000474 <__libc_init_array+0x44>)
 8000444:	f000 f818 	bl	8000478 <_init>
 8000448:	1b64      	subs	r4, r4, r5
 800044a:	10a4      	asrs	r4, r4, #2
 800044c:	2600      	movs	r6, #0
 800044e:	42a6      	cmp	r6, r4
 8000450:	d105      	bne.n	800045e <__libc_init_array+0x2e>
 8000452:	bd70      	pop	{r4, r5, r6, pc}
 8000454:	f855 3b04 	ldr.w	r3, [r5], #4
 8000458:	4798      	blx	r3
 800045a:	3601      	adds	r6, #1
 800045c:	e7ee      	b.n	800043c <__libc_init_array+0xc>
 800045e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000462:	4798      	blx	r3
 8000464:	3601      	adds	r6, #1
 8000466:	e7f2      	b.n	800044e <__libc_init_array+0x1e>
 8000468:	08000490 	.word	0x08000490
 800046c:	08000490 	.word	0x08000490
 8000470:	08000490 	.word	0x08000490
 8000474:	08000494 	.word	0x08000494

08000478 <_init>:
 8000478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047a:	bf00      	nop
 800047c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800047e:	bc08      	pop	{r3}
 8000480:	469e      	mov	lr, r3
 8000482:	4770      	bx	lr

08000484 <_fini>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr
