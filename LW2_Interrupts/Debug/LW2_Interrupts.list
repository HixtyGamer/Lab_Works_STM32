
LW2_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00010440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00010440  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010440  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ac4  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001fe  00000000  00000000  00010f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  000111d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  00011250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000075b  00000000  00000000  0002ba37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bdc6  00000000  00000000  0002c192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7f58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000198  00000000  00000000  000c7fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000420 	.word	0x08000420

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000420 	.word	0x08000420

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void task_3_interrupt();
void cr_task_1();
void cr_task_1_interrupt();

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//task_1();
	//task_2();
	//task_3();
	cr_task_1();
 8000258:	f000 f80a 	bl	8000270 <cr_task_1>
 800025c:	2300      	movs	r3, #0
}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
	//task_1_interrupt();
	//task_2_interrupt();
	//task_3_interrupt();
	cr_task_1_interrupt();
 8000266:	f000 f849 	bl	80002fc <cr_task_1_interrupt>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <cr_task_1>:
		EXTI->PR1 = EXTI_PR1_PIF15;
	}
}

void cr_task_1()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 8000276:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <cr_task_1+0x78>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a1b      	ldr	r2, [pc, #108]	; (80002e8 <cr_task_1+0x78>)
 800027c:	f043 0312 	orr.w	r3, r3, #18
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <cr_task_1+0x78>)
 8000284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000286:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <cr_task_1+0x78>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6613      	str	r3, [r2, #96]	; 0x60

	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB;
 800028e:	4b17      	ldr	r3, [pc, #92]	; (80002ec <cr_task_1+0x7c>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a16      	ldr	r2, [pc, #88]	; (80002ec <cr_task_1+0x7c>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6153      	str	r3, [r2, #20]

    EXTI->IMR1 |= EXTI_IMR1_IM12;
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <cr_task_1+0x80>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a14      	ldr	r2, [pc, #80]	; (80002f0 <cr_task_1+0x80>)
 80002a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002a4:	6013      	str	r3, [r2, #0]
    EXTI->FTSR1 |= EXTI_FTSR1_FT12;
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <cr_task_1+0x80>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <cr_task_1+0x80>)
 80002ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b0:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ( EXTI15_10_IRQn );
 80002b2:	2028      	movs	r0, #40	; 0x28
 80002b4:	f7ff ffb0 	bl	8000218 <__NVIC_EnableIRQ>

	GPIOE->MODER &= ~(GPIO_MODER_MODE12
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <cr_task_1+0x84>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <cr_task_1+0x84>)
 80002be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002c2:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE12_Pos
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <cr_task_1+0x84>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <cr_task_1+0x84>)
 80002ca:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002ce:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE13_Pos
				  | 1 << GPIO_MODER_MODE14_Pos
				  | 1 << GPIO_MODER_MODE15_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12);
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <cr_task_1+0x88>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <cr_task_1+0x88>)
 80002d6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002da:	6013      	str	r3, [r2, #0]

	uint8_t counter = 0,
 80002dc:	2300      	movs	r3, #0
 80002de:	71fb      	strb	r3, [r7, #7]
			is_pressed = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	71bb      	strb	r3, [r7, #6]

	while(1)
 80002e4:	e7fe      	b.n	80002e4 <cr_task_1+0x74>
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010000 	.word	0x40010000
 80002f0:	40010400 	.word	0x40010400
 80002f4:	48001000 	.word	0x48001000
 80002f8:	48000400 	.word	0x48000400

080002fc <cr_task_1_interrupt>:

	}
}

void cr_task_1_interrupt()
{
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
	uint8_t counter = (GPIOE->ODR >> GPIO_ODR_OD12_Pos) & 0b1111;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <cr_task_1_interrupt+0x78>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	0b1b      	lsrs	r3, r3, #12
 8000308:	b2db      	uxtb	r3, r3
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	73fb      	strb	r3, [r7, #15]
	uint32_t i = 0,
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
			 long_press_delay = 500000;
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <cr_task_1_interrupt+0x7c>)
 8000316:	607b      	str	r3, [r7, #4]

	for(; i < long_press_delay; i++)
 8000318:	e010      	b.n	800033c <cr_task_1_interrupt+0x40>
	{
		if(GPIOB->IDR & GPIO_IDR_ID12)
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <cr_task_1_interrupt+0x80>)
 800031c:	691b      	ldr	r3, [r3, #16]
 800031e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000322:	2b00      	cmp	r3, #0
 8000324:	d007      	beq.n	8000336 <cr_task_1_interrupt+0x3a>
		{
			counter++;
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	3301      	adds	r3, #1
 800032a:	73fb      	strb	r3, [r7, #15]
			counter &= 0b1111;
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	f003 030f 	and.w	r3, r3, #15
 8000332:	73fb      	strb	r3, [r7, #15]
			break;
 8000334:	e006      	b.n	8000344 <cr_task_1_interrupt+0x48>
	for(; i < long_press_delay; i++)
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	3301      	adds	r3, #1
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68ba      	ldr	r2, [r7, #8]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	d3ea      	bcc.n	800031a <cr_task_1_interrupt+0x1e>
		}
	}

	if (i == long_press_delay)
 8000344:	68ba      	ldr	r2, [r7, #8]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	d101      	bne.n	8000350 <cr_task_1_interrupt+0x54>
	{
		counter = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	GPIOE->BSRR = GPIO_BSRR_BR12
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <cr_task_1_interrupt+0x78>)
 8000352:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8000356:	619a      	str	r2, [r3, #24]
				| GPIO_BSRR_BR13
				| GPIO_BSRR_BR14
				| GPIO_BSRR_BR15;

	GPIOE->BSRR = counter << GPIO_BSRR_BS12_Pos;
 8000358:	7bfb      	ldrb	r3, [r7, #15]
 800035a:	031a      	lsls	r2, r3, #12
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <cr_task_1_interrupt+0x78>)
 800035e:	619a      	str	r2, [r3, #24]

    EXTI->PR1 = EXTI_PR1_PIF12;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <cr_task_1_interrupt+0x84>)
 8000362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000366:	615a      	str	r2, [r3, #20]
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	48001000 	.word	0x48001000
 8000378:	0007a120 	.word	0x0007a120
 800037c:	48000400 	.word	0x48000400
 8000380:	40010400 	.word	0x40010400

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	; (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ff4d 	bl	8000254 <main>

080003ba <LoopForever>:

LoopForever:
    b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC1_2_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	; (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	; (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	; (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	; (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
