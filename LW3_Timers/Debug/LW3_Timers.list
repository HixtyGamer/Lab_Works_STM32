
LW3_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  0800055c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000efe  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002a9  00000000  00000000  00020f32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  000211e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c8  00000000  00000000  000212c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7ed  00000000  00000000  00021388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000963  00000000  00000000  0003bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bee9  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d83c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002c0  00000000  00000000  000d8414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000544 	.word	0x08000544

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000544 	.word	0x08000544

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void cr_task_3_timer();

int interrupt_counter = 1; //для задания 3 и творческого задания 1

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
#elif TASK == 4
	cr_task_1();
#elif TASK == 5
	cr_task_2();
#elif TASK == 6
	cr_task_3();
 8000258:	f000 f86e 	bl	8000338 <cr_task_3>
 800025c:	2300      	movs	r3, #0
#endif

}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
#elif TASK == 4
	cr_task_1_timer();
#elif TASK == 5
	cr_task_2_timer();
#endif
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <TIM3_IRQHandler>:

void TIM3_IRQHandler (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
#if TASK == 3
	task_3_timer();
#elif TASK == 6
	cr_task_3_timer();
 8000274:	f000 f904 	bl	8000480 <cr_task_3_timer>
#endif
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
#if TASK == 5
	cr_task_2_interrupt();
#endif
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <setup_clock>:

void setup_clock()
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 8000290:	4b25      	ldr	r3, [pc, #148]	; (8000328 <setup_clock+0x9c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a24      	ldr	r2, [pc, #144]	; (8000328 <setup_clock+0x9c>)
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800029c:	4b22      	ldr	r3, [pc, #136]	; (8000328 <setup_clock+0x9c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a21      	ldr	r2, [pc, #132]	; (8000328 <setup_clock+0x9c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]

    RCC->CR |= RCC_CR_HSEON;
 80002a8:	4b20      	ldr	r3, [pc, #128]	; (800032c <setup_clock+0xa0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1f      	ldr	r2, [pc, #124]	; (800032c <setup_clock+0xa0>)
 80002ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b2:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY) {}
 80002b4:	bf00      	nop
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <setup_clock+0xa0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002c2:	d1f8      	bne.n	80002b6 <setup_clock+0x2a>

    RCC->PLLCFGR&=~(RCC_PLLCFGR_PLLR_Msk | RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk);
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <setup_clock+0xa0>)
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	4918      	ldr	r1, [pc, #96]	; (800032c <setup_clock+0xa0>)
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <setup_clock+0xa4>)
 80002cc:	4013      	ands	r3, r2
 80002ce:	60cb      	str	r3, [r1, #12]

    RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLR_Pos // Установка делителя R
 80002d0:	4b16      	ldr	r3, [pc, #88]	; (800032c <setup_clock+0xa0>)
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	4915      	ldr	r1, [pc, #84]	; (800032c <setup_clock+0xa0>)
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <setup_clock+0xa8>)
 80002d8:	4313      	orrs	r3, r2
 80002da:	60cb      	str	r3, [r1, #12]
                    | RCC_PLLCFGR_PLLREN    // Включение R делителя PLL
                    | 15 << RCC_PLLCFGR_PLLN_Pos // Установка умножителя N
                    | 0 << RCC_PLLCFGR_PLLM_Pos // Установка делителя M
                    | RCC_PLLCFGR_PLLSRC_HSE; // HSE - источник сигнала для PLL

    RCC->CR |= RCC_CR_PLLON;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <setup_clock+0xa0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a12      	ldr	r2, [pc, #72]	; (800032c <setup_clock+0xa0>)
 80002e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002e6:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY){}
 80002e8:	bf00      	nop
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <setup_clock+0xa0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002f6:	d1f8      	bne.n	80002ea <setup_clock+0x5e>

    RCC->CFGR |= RCC_CFGR_SW_Msk;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <setup_clock+0xa0>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <setup_clock+0xa0>)
 80002fe:	f043 0303 	orr.w	r3, r3, #3
 8000302:	6093      	str	r3, [r2, #8]
    RCC->CFGR &= ~(RCC_CFGR_SW_Msk ^ RCC_CFGR_SW_PLL);
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <setup_clock+0xa0>)
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <setup_clock+0xa0>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	6093      	str	r3, [r2, #8]

    while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL){}
 800030c:	bf00      	nop
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <setup_clock+0xa0>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f003 030c 	and.w	r3, r3, #12
 8000316:	2b0c      	cmp	r3, #12
 8000318:	d1f9      	bne.n	800030e <setup_clock+0x82>
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40022000 	.word	0x40022000
 800032c:	40021000 	.word	0x40021000
 8000330:	f9ff800f 	.word	0xf9ff800f
 8000334:	05000f03 	.word	0x05000f03

08000338 <cr_task_3>:

    TIM2->SR &= ~ TIM_SR_UIF;
}

void cr_task_3()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	setup_clock();
 800033e:	f7ff ffa5 	bl	800028c <setup_clock>

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000342:	4b4b      	ldr	r3, [pc, #300]	; (8000470 <cr_task_3+0x138>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a4a      	ldr	r2, [pc, #296]	; (8000470 <cr_task_3+0x138>)
 8000348:	f043 0308 	orr.w	r3, r3, #8
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM3EN;
 800034e:	4b48      	ldr	r3, [pc, #288]	; (8000470 <cr_task_3+0x138>)
 8000350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000352:	4a47      	ldr	r2, [pc, #284]	; (8000470 <cr_task_3+0x138>)
 8000354:	f043 0303 	orr.w	r3, r3, #3
 8000358:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOD->MODER &= ~( GPIO_MODER_MODE3_Msk);
 800035a:	4b46      	ldr	r3, [pc, #280]	; (8000474 <cr_task_3+0x13c>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a45      	ldr	r2, [pc, #276]	; (8000474 <cr_task_3+0x13c>)
 8000360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000364:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= 2 <<  GPIO_MODER_MODE3_Pos;
 8000366:	4b43      	ldr	r3, [pc, #268]	; (8000474 <cr_task_3+0x13c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a42      	ldr	r2, [pc, #264]	; (8000474 <cr_task_3+0x13c>)
 800036c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000370:	6013      	str	r3, [r2, #0]

    GPIOD->AFR[0] |= 2 << GPIO_AFRL_AFSEL3_Pos;
 8000372:	4b40      	ldr	r3, [pc, #256]	; (8000474 <cr_task_3+0x13c>)
 8000374:	6a1b      	ldr	r3, [r3, #32]
 8000376:	4a3f      	ldr	r2, [pc, #252]	; (8000474 <cr_task_3+0x13c>)
 8000378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037c:	6213      	str	r3, [r2, #32]

    TIM3->PSC = 19999;
 800037e:	4b3e      	ldr	r3, [pc, #248]	; (8000478 <cr_task_3+0x140>)
 8000380:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 1500;
 8000386:	4b3c      	ldr	r3, [pc, #240]	; (8000478 <cr_task_3+0x140>)
 8000388:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800038c:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <cr_task_3+0x140>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a39      	ldr	r2, [pc, #228]	; (8000478 <cr_task_3+0x140>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN; // Включение таймера
 800039a:	4b37      	ldr	r3, [pc, #220]	; (8000478 <cr_task_3+0x140>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a36      	ldr	r2, [pc, #216]	; (8000478 <cr_task_3+0x140>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ (TIM3_IRQn);
 80003a6:	201d      	movs	r0, #29
 80003a8:	f7ff ff36 	bl	8000218 <__NVIC_EnableIRQ>

    TIM2->PSC = 0;
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b0:	2200      	movs	r2, #0
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 100;
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b8:	2264      	movs	r2, #100	; 0x64
 80003ba:	62da      	str	r2, [r3, #44]	; 0x2c
    // Настроить таймер в режим ШИМ
    TIM2->CCMR1 |=  TIM_CCMR1_OC1PE | 6 << TIM_CCMR1_OC1M_Pos;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c6:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 80003ca:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E; // включить канал 1
 80003cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d0:	6a1b      	ldr	r3, [r3, #32]
 80003d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_ARPE;  // Разрешить автоматическую перегрузку счетчика
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ea:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_CEN; // Включить таймер
 80003ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003f6:	f043 0301 	orr.w	r3, r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
    TIM2->CCR1 = 20; // Установить коэффициент заполнения на канал 3 - 0.625
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	2214      	movs	r2, #20
 8000402:	635a      	str	r2, [r3, #52]	; 0x34

	while(1)
	{
		for(int8_t i = -100; i < 100; i++)
 8000404:	239c      	movs	r3, #156	; 0x9c
 8000406:	71fb      	strb	r3, [r7, #7]
 8000408:	e02c      	b.n	8000464 <cr_task_3+0x12c>
		{
			interrupt_counter = 1;
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <cr_task_3+0x144>)
 800040c:	2201      	movs	r2, #1
 800040e:	601a      	str	r2, [r3, #0]

		    TIM3->PSC = 19999; // Предделитель = 19999
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <cr_task_3+0x140>)
 8000412:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000416:	629a      	str	r2, [r3, #40]	; 0x28
		    TIM3->ARR = 25;
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <cr_task_3+0x140>)
 800041a:	2219      	movs	r2, #25
 800041c:	62da      	str	r2, [r3, #44]	; 0x2c
		    TIM3->CR1 |= TIM_CR1_CEN;
 800041e:	4b16      	ldr	r3, [pc, #88]	; (8000478 <cr_task_3+0x140>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <cr_task_3+0x140>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6013      	str	r3, [r2, #0]

		    while(interrupt_counter);
 800042a:	bf00      	nop
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <cr_task_3+0x144>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1fb      	bne.n	800042c <cr_task_3+0xf4>

		    TIM3->CR1 &= ~TIM_CR1_CEN;
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <cr_task_3+0x140>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <cr_task_3+0x140>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	6013      	str	r3, [r2, #0]
		    TIM3->CNT = 0;
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <cr_task_3+0x140>)
 8000442:	2200      	movs	r2, #0
 8000444:	625a      	str	r2, [r3, #36]	; 0x24

		    TIM2->CCR1 = abs(i);
 8000446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800044a:	2b00      	cmp	r3, #0
 800044c:	bfb8      	it	lt
 800044e:	425b      	neglt	r3, r3
 8000450:	b2da      	uxtb	r2, r3
 8000452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000456:	635a      	str	r2, [r3, #52]	; 0x34
		for(int8_t i = -100; i < 100; i++)
 8000458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045c:	b2db      	uxtb	r3, r3
 800045e:	3301      	adds	r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	71fb      	strb	r3, [r7, #7]
 8000464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000468:	2b63      	cmp	r3, #99	; 0x63
 800046a:	ddce      	ble.n	800040a <cr_task_3+0xd2>
 800046c:	e7ca      	b.n	8000404 <cr_task_3+0xcc>
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	48000c00 	.word	0x48000c00
 8000478:	40000400 	.word	0x40000400
 800047c:	20000000 	.word	0x20000000

08000480 <cr_task_3_timer>:
		}
	}
}

void cr_task_3_timer()
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	interrupt_counter = 0;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <cr_task_3_timer+0x20>)
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]

    TIM3->SR &= ~ TIM_SR_UIF;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <cr_task_3_timer+0x24>)
 800048c:	691b      	ldr	r3, [r3, #16]
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <cr_task_3_timer+0x24>)
 8000490:	f023 0301 	bic.w	r3, r3, #1
 8000494:	6113      	str	r3, [r2, #16]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	20000000 	.word	0x20000000
 80004a4:	40000400 	.word	0x40000400

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff febb 	bl	8000254 <main>

080004de <LoopForever>:

LoopForever:
    b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ec:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f4:	20000020 	.word	0x20000020

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	; (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	; (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
