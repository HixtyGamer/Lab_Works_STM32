
LW3_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000032c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000504  08000504  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000504  08000504  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000504  08000504  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000504  08000504  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800050c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c2f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001ef  00000000  00000000  00020c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00020e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7ed  00000000  00000000  00020f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000787  00000000  00000000  0003b74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be09  00000000  00000000  0003bed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d7cdd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000170  00000000  00000000  000d7d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080004ec 	.word	0x080004ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	080004ec 	.word	0x080004ec

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void task_3_timer();

int interrupt_counter = 1;

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
#if TASK == 1
	task_1();
#elif TASK == 2
	task_2();
#elif TASK == 3
	task_3();
 8000258:	f000 f810 	bl	800027c <task_3>
 800025c:	2300      	movs	r3, #0
#endif


}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
#if TASK == 1
	task_1_timer();
#elif TASK == 2
	task_2_timer();
#endif
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <TIM3_IRQHandler>:

void TIM3_IRQHandler (void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
#if TASK == 3
	task_3_timer();
 8000274:	f000 f8b8 	bl	80003e8 <task_3_timer>
#endif
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <task_3>:
    GPIOD->ODR ^= GPIO_ODR_OD1;
    TIM2->SR &= ~ TIM_SR_UIF; // Сброс прерывания по таймеру
}

void task_3()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 8000280:	4b53      	ldr	r3, [pc, #332]	; (80003d0 <task_3+0x154>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a52      	ldr	r2, [pc, #328]	; (80003d0 <task_3+0x154>)
 8000286:	f023 030f 	bic.w	r3, r3, #15
 800028a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800028c:	4b50      	ldr	r3, [pc, #320]	; (80003d0 <task_3+0x154>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a4f      	ldr	r2, [pc, #316]	; (80003d0 <task_3+0x154>)
 8000292:	f043 0302 	orr.w	r3, r3, #2
 8000296:	6013      	str	r3, [r2, #0]

    RCC->CR |= RCC_CR_HSEON;
 8000298:	4b4e      	ldr	r3, [pc, #312]	; (80003d4 <task_3+0x158>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a4d      	ldr	r2, [pc, #308]	; (80003d4 <task_3+0x158>)
 800029e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002a2:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY) {}
 80002a4:	bf00      	nop
 80002a6:	4b4b      	ldr	r3, [pc, #300]	; (80003d4 <task_3+0x158>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002b2:	d1f8      	bne.n	80002a6 <task_3+0x2a>

    RCC->PLLCFGR&=~(RCC_PLLCFGR_PLLR_Msk | RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk);
 80002b4:	4b47      	ldr	r3, [pc, #284]	; (80003d4 <task_3+0x158>)
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	4946      	ldr	r1, [pc, #280]	; (80003d4 <task_3+0x158>)
 80002ba:	4b47      	ldr	r3, [pc, #284]	; (80003d8 <task_3+0x15c>)
 80002bc:	4013      	ands	r3, r2
 80002be:	60cb      	str	r3, [r1, #12]

    RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLR_Pos // Установка делителя R
 80002c0:	4b44      	ldr	r3, [pc, #272]	; (80003d4 <task_3+0x158>)
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	4943      	ldr	r1, [pc, #268]	; (80003d4 <task_3+0x158>)
 80002c6:	4b45      	ldr	r3, [pc, #276]	; (80003dc <task_3+0x160>)
 80002c8:	4313      	orrs	r3, r2
 80002ca:	60cb      	str	r3, [r1, #12]
                    | RCC_PLLCFGR_PLLREN    // Включение R делителя PLL
                    | 15 << RCC_PLLCFGR_PLLN_Pos // Установка умножителя N
                    | 0 << RCC_PLLCFGR_PLLM_Pos // Установка делителя M
                    | RCC_PLLCFGR_PLLSRC_HSE; // HSE - источник сигнала для PLL

    RCC->CR |= RCC_CR_PLLON;
 80002cc:	4b41      	ldr	r3, [pc, #260]	; (80003d4 <task_3+0x158>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a40      	ldr	r2, [pc, #256]	; (80003d4 <task_3+0x158>)
 80002d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d6:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY){}
 80002d8:	bf00      	nop
 80002da:	4b3e      	ldr	r3, [pc, #248]	; (80003d4 <task_3+0x158>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002e6:	d1f8      	bne.n	80002da <task_3+0x5e>

    RCC->CFGR |= RCC_CFGR_SW_Msk;
 80002e8:	4b3a      	ldr	r3, [pc, #232]	; (80003d4 <task_3+0x158>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a39      	ldr	r2, [pc, #228]	; (80003d4 <task_3+0x158>)
 80002ee:	f043 0303 	orr.w	r3, r3, #3
 80002f2:	6093      	str	r3, [r2, #8]
    RCC->CFGR &= ~(RCC_CFGR_SW_Msk ^ RCC_CFGR_SW_PLL);
 80002f4:	4b37      	ldr	r3, [pc, #220]	; (80003d4 <task_3+0x158>)
 80002f6:	4a37      	ldr	r2, [pc, #220]	; (80003d4 <task_3+0x158>)
 80002f8:	689b      	ldr	r3, [r3, #8]
 80002fa:	6093      	str	r3, [r2, #8]

    while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL){}
 80002fc:	bf00      	nop
 80002fe:	4b35      	ldr	r3, [pc, #212]	; (80003d4 <task_3+0x158>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 030c 	and.w	r3, r3, #12
 8000306:	2b0c      	cmp	r3, #12
 8000308:	d1f9      	bne.n	80002fe <task_3+0x82>

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 800030a:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <task_3+0x158>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	4a31      	ldr	r2, [pc, #196]	; (80003d4 <task_3+0x158>)
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM3EN;
 8000316:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <task_3+0x158>)
 8000318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800031a:	4a2e      	ldr	r2, [pc, #184]	; (80003d4 <task_3+0x158>)
 800031c:	f043 0303 	orr.w	r3, r3, #3
 8000320:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOD->MODER &= ~( GPIO_MODER_MODE3_Msk);
 8000322:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <task_3+0x164>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a2e      	ldr	r2, [pc, #184]	; (80003e0 <task_3+0x164>)
 8000328:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800032c:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= 2 <<  GPIO_MODER_MODE3_Pos;
 800032e:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <task_3+0x164>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a2b      	ldr	r2, [pc, #172]	; (80003e0 <task_3+0x164>)
 8000334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000338:	6013      	str	r3, [r2, #0]

    GPIOD->AFR[0] |= 2 << GPIO_AFRL_AFSEL3_Pos;
 800033a:	4b29      	ldr	r3, [pc, #164]	; (80003e0 <task_3+0x164>)
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	4a28      	ldr	r2, [pc, #160]	; (80003e0 <task_3+0x164>)
 8000340:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000344:	6213      	str	r3, [r2, #32]

    TIM3->PSC = 19999;
 8000346:	4b27      	ldr	r3, [pc, #156]	; (80003e4 <task_3+0x168>)
 8000348:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 1500;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <task_3+0x168>)
 8000350:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
 8000356:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <task_3+0x168>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <task_3+0x168>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_CEN; // Включение таймера
 8000362:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <task_3+0x168>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <task_3+0x168>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ (TIM3_IRQn);
 800036e:	201d      	movs	r0, #29
 8000370:	f7ff ff52 	bl	8000218 <__NVIC_EnableIRQ>

    TIM2->PSC = 0;
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000378:	2200      	movs	r2, #0
 800037a:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 100;
 800037c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000380:	2264      	movs	r2, #100	; 0x64
 8000382:	62da      	str	r2, [r3, #44]	; 0x2c
    // Настроить таймер в режим ШИМ
    TIM2->CCMR1 |=  TIM_CCMR1_OC1PE | 6 << TIM_CCMR1_OC1M_Pos;
 8000384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038e:	f043 0368 	orr.w	r3, r3, #104	; 0x68
 8000392:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC1E; // включить канал 1
 8000394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_ARPE;  // Разрешить автоматическую перегрузку счетчика
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b2:	6013      	str	r3, [r2, #0]
    TIM2->CR1 |= TIM_CR1_CEN; // Включить таймер
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003be:	f043 0301 	orr.w	r3, r3, #1
 80003c2:	6013      	str	r3, [r2, #0]
    TIM2->CCR1 = 20; // Установить коэффициент заполнения на канал 3 - 0.625
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c8:	2214      	movs	r2, #20
 80003ca:	635a      	str	r2, [r3, #52]	; 0x34

	while(1)
 80003cc:	e7fe      	b.n	80003cc <task_3+0x150>
 80003ce:	bf00      	nop
 80003d0:	40022000 	.word	0x40022000
 80003d4:	40021000 	.word	0x40021000
 80003d8:	f9ff800f 	.word	0xf9ff800f
 80003dc:	05000f03 	.word	0x05000f03
 80003e0:	48000c00 	.word	0x48000c00
 80003e4:	40000400 	.word	0x40000400

080003e8 <task_3_timer>:

	}
}

void task_3_timer()
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	switch(interrupt_counter)
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <task_3_timer+0x60>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b02      	cmp	r3, #2
 80003f2:	d016      	beq.n	8000422 <task_3_timer+0x3a>
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	dc1c      	bgt.n	8000432 <task_3_timer+0x4a>
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d002      	beq.n	8000402 <task_3_timer+0x1a>
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d008      	beq.n	8000412 <task_3_timer+0x2a>
 8000400:	e017      	b.n	8000432 <task_3_timer+0x4a>
	{
	case 0:
		interrupt_counter = 1;
 8000402:	4b11      	ldr	r3, [pc, #68]	; (8000448 <task_3_timer+0x60>)
 8000404:	2201      	movs	r2, #1
 8000406:	601a      	str	r2, [r3, #0]
	    TIM2->CCR1 = 50;
 8000408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800040c:	2232      	movs	r2, #50	; 0x32
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
	    break;
 8000410:	e00f      	b.n	8000432 <task_3_timer+0x4a>
	case 1:
		interrupt_counter = 2;
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <task_3_timer+0x60>)
 8000414:	2202      	movs	r2, #2
 8000416:	601a      	str	r2, [r3, #0]
	    TIM2->CCR1 = 80;
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	2250      	movs	r2, #80	; 0x50
 800041e:	635a      	str	r2, [r3, #52]	; 0x34
	    break;
 8000420:	e007      	b.n	8000432 <task_3_timer+0x4a>
	case 2:
		interrupt_counter = 0;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <task_3_timer+0x60>)
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
	    TIM2->CCR1 = 20;
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	2214      	movs	r2, #20
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
	    break;
 8000430:	bf00      	nop
	}

    TIM3->SR &= ~ TIM_SR_UIF;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <task_3_timer+0x64>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	4a05      	ldr	r2, [pc, #20]	; (800044c <task_3_timer+0x64>)
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	6113      	str	r3, [r2, #16]
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	20000000 	.word	0x20000000
 800044c:	40000400 	.word	0x40000400

08000450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000452:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047e:	f000 f811 	bl	80004a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff fee7 	bl	8000254 <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   r0, =_estack
 8000488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000494:	0800050c 	.word	0x0800050c
  ldr r2, =_sbss
 8000498:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800049c:	20000020 	.word	0x20000020

080004a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_2_IRQHandler>
	...

080004a4 <__libc_init_array>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	4d0d      	ldr	r5, [pc, #52]	; (80004dc <__libc_init_array+0x38>)
 80004a8:	4c0d      	ldr	r4, [pc, #52]	; (80004e0 <__libc_init_array+0x3c>)
 80004aa:	1b64      	subs	r4, r4, r5
 80004ac:	10a4      	asrs	r4, r4, #2
 80004ae:	2600      	movs	r6, #0
 80004b0:	42a6      	cmp	r6, r4
 80004b2:	d109      	bne.n	80004c8 <__libc_init_array+0x24>
 80004b4:	4d0b      	ldr	r5, [pc, #44]	; (80004e4 <__libc_init_array+0x40>)
 80004b6:	4c0c      	ldr	r4, [pc, #48]	; (80004e8 <__libc_init_array+0x44>)
 80004b8:	f000 f818 	bl	80004ec <_init>
 80004bc:	1b64      	subs	r4, r4, r5
 80004be:	10a4      	asrs	r4, r4, #2
 80004c0:	2600      	movs	r6, #0
 80004c2:	42a6      	cmp	r6, r4
 80004c4:	d105      	bne.n	80004d2 <__libc_init_array+0x2e>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004cc:	4798      	blx	r3
 80004ce:	3601      	adds	r6, #1
 80004d0:	e7ee      	b.n	80004b0 <__libc_init_array+0xc>
 80004d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d6:	4798      	blx	r3
 80004d8:	3601      	adds	r6, #1
 80004da:	e7f2      	b.n	80004c2 <__libc_init_array+0x1e>
 80004dc:	08000504 	.word	0x08000504
 80004e0:	08000504 	.word	0x08000504
 80004e4:	08000504 	.word	0x08000504
 80004e8:	08000508 	.word	0x08000508

080004ec <_init>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

080004f8 <_fini>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr
