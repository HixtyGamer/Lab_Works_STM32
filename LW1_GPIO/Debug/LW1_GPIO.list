
LW1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  4 .ARM          00000000  08000434  08000434  0001043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000434  0800043c  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0001043c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001043c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006e2  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a5  00000000  00000000  00010b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00010cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  00010d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000085f  00000000  00000000  0002b5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b735  00000000  00000000  0002be36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c756b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000158  00000000  00000000  000c75c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800041c 	.word	0x0800041c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	0800041c 	.word	0x0800041c

08000218 <main>:
void cr_task2();
void cr_task3();
void cr_task4();

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//task_2();
	//task_3();
	//cr_task1();
	//cr_task2();
	//cr_task3();
	cr_task4();
 800021c:	f000 f804 	bl	8000228 <cr_task4>
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <cr_task4>:
	}

}

void cr_task4()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 800022e:	4b45      	ldr	r3, [pc, #276]	; (8000344 <cr_task4+0x11c>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a44      	ldr	r2, [pc, #272]	; (8000344 <cr_task4+0x11c>)
 8000234:	f043 0312 	orr.w	r3, r3, #18
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOE->MODER &= ~(GPIO_MODER_MODE12
 800023a:	4b43      	ldr	r3, [pc, #268]	; (8000348 <cr_task4+0x120>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a42      	ldr	r2, [pc, #264]	; (8000348 <cr_task4+0x120>)
 8000240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000244:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE12_Pos
 8000246:	4b40      	ldr	r3, [pc, #256]	; (8000348 <cr_task4+0x120>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a3f      	ldr	r2, [pc, #252]	; (8000348 <cr_task4+0x120>)
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000250:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE13_Pos
				  | 1 << GPIO_MODER_MODE14_Pos
				  | 1 << GPIO_MODER_MODE15_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12);
 8000252:	4b3e      	ldr	r3, [pc, #248]	; (800034c <cr_task4+0x124>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a3d      	ldr	r2, [pc, #244]	; (800034c <cr_task4+0x124>)
 8000258:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025c:	6013      	str	r3, [r2, #0]

	uint8_t counter = 0,
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]
			 buffer = 0,
 8000262:	2300      	movs	r3, #0
 8000264:	713b      	strb	r3, [r7, #4]
			 is_pressed = 0,
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
			 b1, b2, b3, b4;

	while(1)
	{
		dumb_delay(100000);
 800026a:	4839      	ldr	r0, [pc, #228]	; (8000350 <cr_task4+0x128>)
 800026c:	f000 f872 	bl	8000354 <dumb_delay>

		GPIOE->ODR &= ~(GPIO_ODR_OD12
 8000270:	4b35      	ldr	r3, [pc, #212]	; (8000348 <cr_task4+0x120>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a34      	ldr	r2, [pc, #208]	; (8000348 <cr_task4+0x120>)
 8000276:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800027a:	6153      	str	r3, [r2, #20]
					  | GPIO_ODR_OD13
					  | GPIO_ODR_OD14
					  | GPIO_ODR_OD15);

		buffer = counter;
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	713b      	strb	r3, [r7, #4]
		b1 = buffer % 2;
 8000280:	793b      	ldrb	r3, [r7, #4]
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	70fb      	strb	r3, [r7, #3]
		buffer = buffer >> 1;
 8000288:	793b      	ldrb	r3, [r7, #4]
 800028a:	085b      	lsrs	r3, r3, #1
 800028c:	713b      	strb	r3, [r7, #4]
		b2 = buffer % 2;
 800028e:	793b      	ldrb	r3, [r7, #4]
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	70bb      	strb	r3, [r7, #2]
		buffer = buffer >> 1;
 8000296:	793b      	ldrb	r3, [r7, #4]
 8000298:	085b      	lsrs	r3, r3, #1
 800029a:	713b      	strb	r3, [r7, #4]
		b3 = buffer % 2;
 800029c:	793b      	ldrb	r3, [r7, #4]
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	707b      	strb	r3, [r7, #1]
		buffer = buffer >> 1;
 80002a4:	793b      	ldrb	r3, [r7, #4]
 80002a6:	085b      	lsrs	r3, r3, #1
 80002a8:	713b      	strb	r3, [r7, #4]
		b4 = buffer % 2;
 80002aa:	793b      	ldrb	r3, [r7, #4]
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	703b      	strb	r3, [r7, #0]

		GPIOE->ODR |= b1 << GPIO_ODR_OD12_Pos
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <cr_task4+0x120>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	78fa      	ldrb	r2, [r7, #3]
 80002b8:	0311      	lsls	r1, r2, #12
					| b2 << GPIO_ODR_OD13_Pos
 80002ba:	78ba      	ldrb	r2, [r7, #2]
 80002bc:	0352      	lsls	r2, r2, #13
 80002be:	4311      	orrs	r1, r2
					| b3 << GPIO_ODR_OD14_Pos
 80002c0:	787a      	ldrb	r2, [r7, #1]
 80002c2:	0392      	lsls	r2, r2, #14
 80002c4:	4311      	orrs	r1, r2
					| b4 << GPIO_ODR_OD15_Pos;
 80002c6:	783a      	ldrb	r2, [r7, #0]
 80002c8:	03d2      	lsls	r2, r2, #15
 80002ca:	430a      	orrs	r2, r1
 80002cc:	4611      	mov	r1, r2
		GPIOE->ODR |= b1 << GPIO_ODR_OD12_Pos
 80002ce:	4a1e      	ldr	r2, [pc, #120]	; (8000348 <cr_task4+0x120>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6153      	str	r3, [r2, #20]

		uint8_t i = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	717b      	strb	r3, [r7, #5]

		if((GPIOB->IDR & GPIO_IDR_ID12) == 0 && is_pressed == 0)
 80002d8:	4b1c      	ldr	r3, [pc, #112]	; (800034c <cr_task4+0x124>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d123      	bne.n	800032c <cr_task4+0x104>
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d120      	bne.n	800032c <cr_task4+0x104>
		{
			//for нужен, чтобы после короткого нажатия не нужно было ждать время как для длинного нажатия
			for(; i < 50; i++)
 80002ea:	e015      	b.n	8000318 <cr_task4+0xf0>
			{
				dumb_delay(10000);
 80002ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80002f0:	f000 f830 	bl	8000354 <dumb_delay>

				if(GPIOB->IDR & GPIO_IDR_ID12)
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <cr_task4+0x124>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d008      	beq.n	8000312 <cr_task4+0xea>
				{
					counter++;
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	3301      	adds	r3, #1
 8000304:	71fb      	strb	r3, [r7, #7]
					if(counter >= 16)
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	2b0f      	cmp	r3, #15
 800030a:	d909      	bls.n	8000320 <cr_task4+0xf8>
						counter = 0;
 800030c:	2300      	movs	r3, #0
 800030e:	71fb      	strb	r3, [r7, #7]
					break;
 8000310:	e006      	b.n	8000320 <cr_task4+0xf8>
			for(; i < 50; i++)
 8000312:	797b      	ldrb	r3, [r7, #5]
 8000314:	3301      	adds	r3, #1
 8000316:	717b      	strb	r3, [r7, #5]
 8000318:	797b      	ldrb	r3, [r7, #5]
 800031a:	2b31      	cmp	r3, #49	; 0x31
 800031c:	d9e6      	bls.n	80002ec <cr_task4+0xc4>
 800031e:	e000      	b.n	8000322 <cr_task4+0xfa>
					break;
 8000320:	bf00      	nop
				}
			}

			if (i == 50)
 8000322:	797b      	ldrb	r3, [r7, #5]
 8000324:	2b32      	cmp	r3, #50	; 0x32
 8000326:	d101      	bne.n	800032c <cr_task4+0x104>
				counter = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	71fb      	strb	r3, [r7, #7]
		}

		//проверка, нажата ли кнопка после выполнения действия, чтобы с новой итерацией цикла while не происходили действия,
		//пока кнопка не будет отпущена
		if((GPIOB->IDR & GPIO_IDR_ID12) == 0)
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <cr_task4+0x124>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000334:	2b00      	cmp	r3, #0
 8000336:	d102      	bne.n	800033e <cr_task4+0x116>
			is_pressed = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	71bb      	strb	r3, [r7, #6]
 800033c:	e795      	b.n	800026a <cr_task4+0x42>
		else
			is_pressed = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	71bb      	strb	r3, [r7, #6]
	{
 8000342:	e792      	b.n	800026a <cr_task4+0x42>
 8000344:	40021000 	.word	0x40021000
 8000348:	48001000 	.word	0x48001000
 800034c:	48000400 	.word	0x48000400
 8000350:	000186a0 	.word	0x000186a0

08000354 <dumb_delay>:
	}
}

void dumb_delay(uint32_t duration)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < duration; i++);
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e002      	b.n	8000368 <dumb_delay+0x14>
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3f8      	bcc.n	8000362 <dumb_delay+0xe>
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000382:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000384:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <LoopForever+0x6>)
  ldr r1, =_edata
 800038a:	490d      	ldr	r1, [pc, #52]	; (80003c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <LoopForever+0xe>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000390:	e002      	b.n	8000398 <LoopCopyDataInit>

08000392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000396:	3304      	adds	r3, #4

08000398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800039c:	d3f9      	bcc.n	8000392 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a0:	4c0a      	ldr	r4, [pc, #40]	; (80003cc <LoopForever+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a4:	e001      	b.n	80003aa <LoopFillZerobss>

080003a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a8:	3204      	adds	r2, #4

080003aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ac:	d3fb      	bcc.n	80003a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ae:	f000 f811 	bl	80003d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b2:	f7ff ff31 	bl	8000218 <main>

080003b6 <LoopForever>:

LoopForever:
    b LoopForever
 80003b6:	e7fe      	b.n	80003b6 <LoopForever>
  ldr   r0, =_estack
 80003b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c4:	0800043c 	.word	0x0800043c
  ldr r2, =_sbss
 80003c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003cc:	2000001c 	.word	0x2000001c

080003d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d0:	e7fe      	b.n	80003d0 <ADC1_2_IRQHandler>
	...

080003d4 <__libc_init_array>:
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	4d0d      	ldr	r5, [pc, #52]	; (800040c <__libc_init_array+0x38>)
 80003d8:	4c0d      	ldr	r4, [pc, #52]	; (8000410 <__libc_init_array+0x3c>)
 80003da:	1b64      	subs	r4, r4, r5
 80003dc:	10a4      	asrs	r4, r4, #2
 80003de:	2600      	movs	r6, #0
 80003e0:	42a6      	cmp	r6, r4
 80003e2:	d109      	bne.n	80003f8 <__libc_init_array+0x24>
 80003e4:	4d0b      	ldr	r5, [pc, #44]	; (8000414 <__libc_init_array+0x40>)
 80003e6:	4c0c      	ldr	r4, [pc, #48]	; (8000418 <__libc_init_array+0x44>)
 80003e8:	f000 f818 	bl	800041c <_init>
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	2600      	movs	r6, #0
 80003f2:	42a6      	cmp	r6, r4
 80003f4:	d105      	bne.n	8000402 <__libc_init_array+0x2e>
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fc:	4798      	blx	r3
 80003fe:	3601      	adds	r6, #1
 8000400:	e7ee      	b.n	80003e0 <__libc_init_array+0xc>
 8000402:	f855 3b04 	ldr.w	r3, [r5], #4
 8000406:	4798      	blx	r3
 8000408:	3601      	adds	r6, #1
 800040a:	e7f2      	b.n	80003f2 <__libc_init_array+0x1e>
 800040c:	08000434 	.word	0x08000434
 8000410:	08000434 	.word	0x08000434
 8000414:	08000434 	.word	0x08000434
 8000418:	08000438 	.word	0x08000438

0800041c <_init>:
 800041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041e:	bf00      	nop
 8000420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	469e      	mov	lr, r3
 8000426:	4770      	bx	lr

08000428 <_fini>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr
