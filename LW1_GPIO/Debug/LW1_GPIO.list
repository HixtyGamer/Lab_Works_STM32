
LW1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00010420  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008df  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a5  00000000  00000000  00010d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00010ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000088  00000000  00000000  00010f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b46  00000000  00000000  0002b7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b7df  00000000  00000000  0002c32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c7b0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001c0  00000000  00000000  000c7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000400 	.word	0x08000400

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000400 	.word	0x08000400

08000218 <main>:
void cr_taskA();
void cr_taskB();
void cr_taskB2();

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//task_1();
	//task_2();
	//task_3();
	//cr_task1();
	//cr_task2();
	cr_task3();
 800021c:	f000 f804 	bl	8000228 <cr_task3>
 8000220:	2300      	movs	r3, #0
	//cr_task4();
	//cr_taskA();
	//cr_taskB();
	//cr_taskB2();

}
 8000222:	4618      	mov	r0, r3
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <cr_task3>:
		}
	}
}

void cr_task3()
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 800022e:	4b3f      	ldr	r3, [pc, #252]	; (800032c <cr_task3+0x104>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a3e      	ldr	r2, [pc, #248]	; (800032c <cr_task3+0x104>)
 8000234:	f043 0312 	orr.w	r3, r3, #18
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOE->MODER &= ~(GPIO_MODER_MODE12
 800023a:	4b3d      	ldr	r3, [pc, #244]	; (8000330 <cr_task3+0x108>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a3c      	ldr	r2, [pc, #240]	; (8000330 <cr_task3+0x108>)
 8000240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000244:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE12_Pos
 8000246:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <cr_task3+0x108>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a39      	ldr	r2, [pc, #228]	; (8000330 <cr_task3+0x108>)
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000250:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE13_Pos
				  | 1 << GPIO_MODER_MODE14_Pos
				  | 1 << GPIO_MODER_MODE15_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12
 8000252:	4b38      	ldr	r3, [pc, #224]	; (8000334 <cr_task3+0x10c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a37      	ldr	r2, [pc, #220]	; (8000334 <cr_task3+0x10c>)
 8000258:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800025c:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14);

	uint8_t counter = 0,
 800025e:	2300      	movs	r3, #0
 8000260:	71fb      	strb	r3, [r7, #7]
			b1_is_pressed = 0,
 8000262:	2300      	movs	r3, #0
 8000264:	71bb      	strb	r3, [r7, #6]
			b2_is_pressed = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	717b      	strb	r3, [r7, #5]

	while(1)
	{
		dumb_delay(10000);
 800026a:	f242 7010 	movw	r0, #10000	; 0x2710
 800026e:	f000 f863 	bl	8000338 <dumb_delay>

		if((GPIOB->IDR & GPIO_IDR_ID12) == 0 && b1_is_pressed == 0)
 8000272:	4b30      	ldr	r3, [pc, #192]	; (8000334 <cr_task3+0x10c>)
 8000274:	691b      	ldr	r3, [r3, #16]
 8000276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800027a:	2b00      	cmp	r3, #0
 800027c:	d116      	bne.n	80002ac <cr_task3+0x84>
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d113      	bne.n	80002ac <cr_task3+0x84>
		{
			b1_is_pressed = 1;
 8000284:	2301      	movs	r3, #1
 8000286:	71bb      	strb	r3, [r7, #6]
			counter++;
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	3301      	adds	r3, #1
 800028c:	71fb      	strb	r3, [r7, #7]
			counter &= 0b1111;
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	f003 030f 	and.w	r3, r3, #15
 8000294:	71fb      	strb	r3, [r7, #7]

			GPIOE->ODR &= ~(GPIO_ODR_OD12
 8000296:	4b26      	ldr	r3, [pc, #152]	; (8000330 <cr_task3+0x108>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	4a25      	ldr	r2, [pc, #148]	; (8000330 <cr_task3+0x108>)
 800029c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002a0:	6153      	str	r3, [r2, #20]
						  | GPIO_ODR_OD13
						  | GPIO_ODR_OD14
						  | GPIO_ODR_OD15);

			GPIOE->BSRR = counter << GPIO_BSRR_BS12_Pos;
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	031a      	lsls	r2, r3, #12
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <cr_task3+0x108>)
 80002a8:	619a      	str	r2, [r3, #24]
 80002aa:	e007      	b.n	80002bc <cr_task3+0x94>
		}
		else if(GPIOB->IDR & GPIO_IDR_ID12)
 80002ac:	4b21      	ldr	r3, [pc, #132]	; (8000334 <cr_task3+0x10c>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <cr_task3+0x94>
		{
			b1_is_pressed = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	71bb      	strb	r3, [r7, #6]
		}

		if((GPIOB->IDR & GPIO_IDR_ID13) == 0 && b2_is_pressed == 0)
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <cr_task3+0x10c>)
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d116      	bne.n	80002f6 <cr_task3+0xce>
 80002c8:	797b      	ldrb	r3, [r7, #5]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d113      	bne.n	80002f6 <cr_task3+0xce>
		{
			b2_is_pressed = 1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	717b      	strb	r3, [r7, #5]
			counter--;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	71fb      	strb	r3, [r7, #7]
			counter &= 0b1111;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	f003 030f 	and.w	r3, r3, #15
 80002de:	71fb      	strb	r3, [r7, #7]

			GPIOE->ODR &= ~(GPIO_ODR_OD12
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <cr_task3+0x108>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <cr_task3+0x108>)
 80002e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80002ea:	6153      	str	r3, [r2, #20]
						  | GPIO_ODR_OD13
						  | GPIO_ODR_OD14
						  | GPIO_ODR_OD15);

			GPIOE->BSRR = counter << GPIO_BSRR_BS12_Pos;
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	031a      	lsls	r2, r3, #12
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <cr_task3+0x108>)
 80002f2:	619a      	str	r2, [r3, #24]
 80002f4:	e007      	b.n	8000306 <cr_task3+0xde>
		}
		else if(GPIOB->IDR & GPIO_IDR_ID13)
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <cr_task3+0x10c>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <cr_task3+0xde>
		{
			b2_is_pressed = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	717b      	strb	r3, [r7, #5]
		}

		if((GPIOB->IDR & GPIO_IDR_ID14) == 0)
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <cr_task3+0x10c>)
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030e:	2b00      	cmp	r3, #0
 8000310:	d1ab      	bne.n	800026a <cr_task3+0x42>
		{
			counter = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	71fb      	strb	r3, [r7, #7]

			GPIOE->ODR &= ~(GPIO_ODR_OD12
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <cr_task3+0x108>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <cr_task3+0x108>)
 800031c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000320:	6153      	str	r3, [r2, #20]
						  | GPIO_ODR_OD13
						  | GPIO_ODR_OD14
						  | GPIO_ODR_OD15);

			GPIOE->BSRR = counter << GPIO_BSRR_BS12_Pos;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	031a      	lsls	r2, r3, #12
 8000326:	4b02      	ldr	r3, [pc, #8]	; (8000330 <cr_task3+0x108>)
 8000328:	619a      	str	r2, [r3, #24]
		dumb_delay(10000);
 800032a:	e79e      	b.n	800026a <cr_task3+0x42>
 800032c:	40021000 	.word	0x40021000
 8000330:	48001000 	.word	0x48001000
 8000334:	48000400 	.word	0x48000400

08000338 <dumb_delay>:
		}
	}
}

void dumb_delay(uint32_t duration)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < duration; i++);
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	e002      	b.n	800034c <dumb_delay+0x14>
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3301      	adds	r3, #1
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	429a      	cmp	r2, r3
 8000352:	d3f8      	bcc.n	8000346 <dumb_delay+0xe>
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
	...

08000364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000366:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000368:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800036e:	490d      	ldr	r1, [pc, #52]	; (80003a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000370:	4a0d      	ldr	r2, [pc, #52]	; (80003a8 <LoopForever+0xe>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000374:	e002      	b.n	800037c <LoopCopyDataInit>

08000376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037a:	3304      	adds	r3, #4

0800037c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800037c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000380:	d3f9      	bcc.n	8000376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000384:	4c0a      	ldr	r4, [pc, #40]	; (80003b0 <LoopForever+0x16>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000388:	e001      	b.n	800038e <LoopFillZerobss>

0800038a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800038c:	3204      	adds	r2, #4

0800038e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000390:	d3fb      	bcc.n	800038a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000392:	f000 f811 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f7ff ff3f 	bl	8000218 <main>

0800039a <LoopForever>:

LoopForever:
    b LoopForever
 800039a:	e7fe      	b.n	800039a <LoopForever>
  ldr   r0, =_estack
 800039c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	4d0d      	ldr	r5, [pc, #52]	; (80003f0 <__libc_init_array+0x38>)
 80003bc:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003be:	1b64      	subs	r4, r4, r5
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	2600      	movs	r6, #0
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	4d0b      	ldr	r5, [pc, #44]	; (80003f8 <__libc_init_array+0x40>)
 80003ca:	4c0c      	ldr	r4, [pc, #48]	; (80003fc <__libc_init_array+0x44>)
 80003cc:	f000 f818 	bl	8000400 <_init>
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	10a4      	asrs	r4, r4, #2
 80003d4:	2600      	movs	r6, #0
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
