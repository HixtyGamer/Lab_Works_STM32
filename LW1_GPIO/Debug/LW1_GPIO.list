
LW1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000308  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080004e0  080004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00010520  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000772  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001a5  00000000  00000000  00010cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00010e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00010ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  00010f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000094e  00000000  00000000  0002b757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b744  00000000  00000000  0002c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c77e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000017c  00000000  00000000  000c783c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080004c8 	.word	0x080004c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080004c8 	.word	0x080004c8

08000218 <main>:
void cr_task3();
void cr_task4();
void cr_taskA();

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//task_3();
	//cr_task1();
	//cr_task2();
	//cr_task3();
	//cr_task4();
	cr_taskA();
 800021c:	f000 f804 	bl	8000228 <cr_taskA>
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <cr_taskA>:
			is_pressed = 0;
	}
}

void cr_taskA()
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
	/*Я так до конца не разобрался где лучше использовать ODR, а где BSRR. В ODR можно напрямую менять состояния выводов,
     * когда как в BSRR для установки и сброса нужно выставлять единицы в отдельные части регистра.
	 * То, как я использовал ODR в творческом задании 1, очень похоже на то, как нужно работать с BSRR,
	 * поэтому на примере данного задания большой разницы между ними я не заметил.
	 * Разве что очищать состояния выводов удобнее и понятнее через BSRR. */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 800022e:	4b6e      	ldr	r3, [pc, #440]	; (80003e8 <cr_taskA+0x1c0>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a6d      	ldr	r2, [pc, #436]	; (80003e8 <cr_taskA+0x1c0>)
 8000234:	f043 0312 	orr.w	r3, r3, #18
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOE->MODER &= ~(GPIO_MODER_MODE12
 800023a:	4b6c      	ldr	r3, [pc, #432]	; (80003ec <cr_taskA+0x1c4>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a6b      	ldr	r2, [pc, #428]	; (80003ec <cr_taskA+0x1c4>)
 8000240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000244:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE12_Pos
 8000246:	4b69      	ldr	r3, [pc, #420]	; (80003ec <cr_taskA+0x1c4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a68      	ldr	r2, [pc, #416]	; (80003ec <cr_taskA+0x1c4>)
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000250:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE13_Pos
				  | 1 << GPIO_MODER_MODE14_Pos
				  | 1 << GPIO_MODER_MODE15_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12);
 8000252:	4b67      	ldr	r3, [pc, #412]	; (80003f0 <cr_taskA+0x1c8>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a66      	ldr	r2, [pc, #408]	; (80003f0 <cr_taskA+0x1c8>)
 8000258:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025c:	6013      	str	r3, [r2, #0]

	uint8_t press_count = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	_Bool is_pressed = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	//счётчик кадров анимации
	uint8_t frame = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	//кадры анимации "победы"
	_Bool victory_frames[][4] = { { 0, 0, 0, 1 },
 8000270:	4b60      	ldr	r3, [pc, #384]	; (80003f4 <cr_taskA+0x1cc>)
 8000272:	f107 0420 	add.w	r4, r7, #32
 8000276:	461d      	mov	r5, r3
 8000278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000280:	e884 0003 	stmia.w	r4, {r0, r1}
								  { 1, 0, 0, 0 },
								  { 0, 1, 0, 0 },
								  { 0, 0, 1, 0 } };

	//кадры анимации "ошибки"
	_Bool error_frames[][4] = { { 0, 0, 0, 0 },
 8000284:	4b5c      	ldr	r3, [pc, #368]	; (80003f8 <cr_taskA+0x1d0>)
 8000286:	463c      	mov	r4, r7
 8000288:	461d      	mov	r5, r3
 800028a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000292:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								{ 0, 1, 1, 1 },
								{ 0, 0, 1, 1 },
								{ 0, 0, 0, 1 } };

	//количество кадров анимации "победы"
	uint8_t victory_num_of_frames = sizeof(victory_frames) / sizeof(victory_frames[0]);
 8000296:	2306      	movs	r3, #6
 8000298:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	//количество кадров анимации "ошибки"
	uint8_t error_num_of_frames = sizeof(error_frames) / sizeof(error_frames[0]);
 800029c:	2308      	movs	r3, #8
 800029e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	while(1)
	{
		dumb_delay(100000);
 80002a2:	4856      	ldr	r0, [pc, #344]	; (80003fc <cr_taskA+0x1d4>)
 80002a4:	f000 f8ac 	bl	8000400 <dumb_delay>

		//очистка состояния загораемых светодиодов
		GPIOE->BSRR |= GPIO_BSRR_BR12
 80002a8:	4b50      	ldr	r3, [pc, #320]	; (80003ec <cr_taskA+0x1c4>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a4f      	ldr	r2, [pc, #316]	; (80003ec <cr_taskA+0x1c4>)
 80002ae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80002b2:	6193      	str	r3, [r2, #24]
					 | GPIO_BSRR_BR13
					 | GPIO_BSRR_BR14
					 | GPIO_BSRR_BR15;

		//изменение анимации после нажатия кнопки
		if(press_count == 0)
 80002b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d135      	bne.n	8000328 <cr_taskA+0x100>
		{
			if(frame >= victory_num_of_frames)
 80002bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80002c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d302      	bcc.n	80002ce <cr_taskA+0xa6>
				frame = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

			GPIOE->BSRR |= victory_frames[frame][0] << GPIO_BSRR_BS12_Pos
 80002ce:	4b47      	ldr	r3, [pc, #284]	; (80003ec <cr_taskA+0x1c4>)
 80002d0:	699a      	ldr	r2, [r3, #24]
 80002d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80002dc:	440b      	add	r3, r1
 80002de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80002e2:	0319      	lsls	r1, r3, #12
						 | victory_frames[frame][1] << GPIO_BSRR_BS13_Pos
 80002e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80002ee:	4403      	add	r3, r0
 80002f0:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 80002f4:	035b      	lsls	r3, r3, #13
 80002f6:	4319      	orrs	r1, r3
						 | victory_frames[frame][2] << GPIO_BSRR_BS14_Pos
 80002f8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000302:	4403      	add	r3, r0
 8000304:	f813 3c1e 	ldrb.w	r3, [r3, #-30]
 8000308:	039b      	lsls	r3, r3, #14
 800030a:	4319      	orrs	r1, r3
						 | victory_frames[frame][3] << GPIO_BSRR_BS15_Pos;
 800030c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000316:	4403      	add	r3, r0
 8000318:	f813 3c1d 	ldrb.w	r3, [r3, #-29]
 800031c:	03db      	lsls	r3, r3, #15
 800031e:	430b      	orrs	r3, r1
			GPIOE->BSRR |= victory_frames[frame][0] << GPIO_BSRR_BS12_Pos
 8000320:	4932      	ldr	r1, [pc, #200]	; (80003ec <cr_taskA+0x1c4>)
 8000322:	4313      	orrs	r3, r2
 8000324:	618b      	str	r3, [r1, #24]
 8000326:	e034      	b.n	8000392 <cr_taskA+0x16a>
		}
		else
		{
			if(frame >= error_num_of_frames)
 8000328:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800032c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000330:	429a      	cmp	r2, r3
 8000332:	d302      	bcc.n	800033a <cr_taskA+0x112>
				frame = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

			GPIOE->BSRR |= error_frames[frame][0] << GPIO_BSRR_BS12_Pos
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <cr_taskA+0x1c4>)
 800033c:	699a      	ldr	r2, [r3, #24]
 800033e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000348:	440b      	add	r3, r1
 800034a:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800034e:	0319      	lsls	r1, r3, #12
						 | error_frames[frame][1] << GPIO_BSRR_BS13_Pos
 8000350:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000354:	009b      	lsls	r3, r3, #2
 8000356:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800035a:	4403      	add	r3, r0
 800035c:	f813 3c3f 	ldrb.w	r3, [r3, #-63]
 8000360:	035b      	lsls	r3, r3, #13
 8000362:	4319      	orrs	r1, r3
						 | error_frames[frame][2] << GPIO_BSRR_BS14_Pos
 8000364:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800036e:	4403      	add	r3, r0
 8000370:	f813 3c3e 	ldrb.w	r3, [r3, #-62]
 8000374:	039b      	lsls	r3, r3, #14
 8000376:	4319      	orrs	r1, r3
						 | error_frames[frame][3] << GPIO_BSRR_BS15_Pos;
 8000378:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000382:	4403      	add	r3, r0
 8000384:	f813 3c3d 	ldrb.w	r3, [r3, #-61]
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	430b      	orrs	r3, r1
			GPIOE->BSRR |= error_frames[frame][0] << GPIO_BSRR_BS12_Pos
 800038c:	4917      	ldr	r1, [pc, #92]	; (80003ec <cr_taskA+0x1c4>)
 800038e:	4313      	orrs	r3, r2
 8000390:	618b      	str	r3, [r1, #24]
		}

		frame++;
 8000392:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000396:	3301      	adds	r3, #1
 8000398:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		if((GPIOB->IDR & GPIO_IDR_ID12) == 0 && is_pressed == 0)
 800039c:	4b14      	ldr	r3, [pc, #80]	; (80003f0 <cr_taskA+0x1c8>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d113      	bne.n	80003d0 <cr_taskA+0x1a8>
 80003a8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80003ac:	f083 0301 	eor.w	r3, r3, #1
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d00c      	beq.n	80003d0 <cr_taskA+0x1a8>
		{
			is_pressed = 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			//изменение значения счётчика нажатий с 0 на 1 или с 1 на 0
			press_count ^= 1;
 80003bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80003c0:	f083 0301 	eor.w	r3, r3, #1
 80003c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			frame = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80003ce:	e009      	b.n	80003e4 <cr_taskA+0x1bc>
		}
		else if(GPIOB->IDR & GPIO_IDR_ID12)
 80003d0:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <cr_taskA+0x1c8>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	f43f af62 	beq.w	80002a2 <cr_taskA+0x7a>
			is_pressed = 0;
 80003de:	2300      	movs	r3, #0
 80003e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		dumb_delay(100000);
 80003e4:	e75d      	b.n	80002a2 <cr_taskA+0x7a>
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48001000 	.word	0x48001000
 80003f0:	48000400 	.word	0x48000400
 80003f4:	080004e0 	.word	0x080004e0
 80003f8:	080004f8 	.word	0x080004f8
 80003fc:	000186a0 	.word	0x000186a0

08000400 <dumb_delay>:
	}
}

void dumb_delay(uint32_t duration)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < duration; i++);
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e002      	b.n	8000414 <dumb_delay+0x14>
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fa      	ldr	r2, [r7, #12]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	d3f8      	bcc.n	800040e <dumb_delay+0xe>
}
 800041c:	bf00      	nop
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800042c:	480d      	ldr	r0, [pc, #52]	; (8000464 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800042e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000430:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	; (8000468 <LoopForever+0x6>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	; (800046c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <LoopForever+0xe>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <LoopForever+0x12>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	; (8000478 <LoopForever+0x16>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045a:	f000 f811 	bl	8000480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800045e:	f7ff fedb 	bl	8000218 <main>

08000462 <LoopForever>:

LoopForever:
    b LoopForever
 8000462:	e7fe      	b.n	8000462 <LoopForever>
  ldr   r0, =_estack
 8000464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000470:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 8000474:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000478:	2000001c 	.word	0x2000001c

0800047c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC1_2_IRQHandler>
	...

08000480 <__libc_init_array>:
 8000480:	b570      	push	{r4, r5, r6, lr}
 8000482:	4d0d      	ldr	r5, [pc, #52]	; (80004b8 <__libc_init_array+0x38>)
 8000484:	4c0d      	ldr	r4, [pc, #52]	; (80004bc <__libc_init_array+0x3c>)
 8000486:	1b64      	subs	r4, r4, r5
 8000488:	10a4      	asrs	r4, r4, #2
 800048a:	2600      	movs	r6, #0
 800048c:	42a6      	cmp	r6, r4
 800048e:	d109      	bne.n	80004a4 <__libc_init_array+0x24>
 8000490:	4d0b      	ldr	r5, [pc, #44]	; (80004c0 <__libc_init_array+0x40>)
 8000492:	4c0c      	ldr	r4, [pc, #48]	; (80004c4 <__libc_init_array+0x44>)
 8000494:	f000 f818 	bl	80004c8 <_init>
 8000498:	1b64      	subs	r4, r4, r5
 800049a:	10a4      	asrs	r4, r4, #2
 800049c:	2600      	movs	r6, #0
 800049e:	42a6      	cmp	r6, r4
 80004a0:	d105      	bne.n	80004ae <__libc_init_array+0x2e>
 80004a2:	bd70      	pop	{r4, r5, r6, pc}
 80004a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a8:	4798      	blx	r3
 80004aa:	3601      	adds	r6, #1
 80004ac:	e7ee      	b.n	800048c <__libc_init_array+0xc>
 80004ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b2:	4798      	blx	r3
 80004b4:	3601      	adds	r6, #1
 80004b6:	e7f2      	b.n	800049e <__libc_init_array+0x1e>
 80004b8:	08000518 	.word	0x08000518
 80004bc:	08000518 	.word	0x08000518
 80004c0:	08000518 	.word	0x08000518
 80004c4:	0800051c 	.word	0x0800051c

080004c8 <_init>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr

080004d4 <_fini>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr
