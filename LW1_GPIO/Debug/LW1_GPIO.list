
LW1_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000254  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0001046c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000591  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000017a  00000000  00000000  00010a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00010c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7e7  00000000  00000000  00010c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000065f  00000000  00000000  0002b457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b6fa  00000000  00000000  0002bab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000c71b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000fc  00000000  00000000  000c7204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000414 	.word	0x08000414

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	08000414 	.word	0x08000414

08000218 <main>:
void task_3();
void cr_task1();


int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//task_1();
	//task_2();
	//task_3();
	cr_task1();
 800021c:	f000 f804 	bl	8000228 <cr_task1>
 8000220:	2300      	movs	r3, #0
}
 8000222:	4618      	mov	r0, r3
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <cr_task1>:
		}
	}
}

void cr_task1()
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 800022e:	4b41      	ldr	r3, [pc, #260]	; (8000334 <cr_task1+0x10c>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a40      	ldr	r2, [pc, #256]	; (8000334 <cr_task1+0x10c>)
 8000234:	f043 0312 	orr.w	r3, r3, #18
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOE->MODER &= ~(GPIO_MODER_MODE12
 800023a:	4b3f      	ldr	r3, [pc, #252]	; (8000338 <cr_task1+0x110>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a3e      	ldr	r2, [pc, #248]	; (8000338 <cr_task1+0x110>)
 8000240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000244:	6013      	str	r3, [r2, #0]
					| GPIO_MODER_MODE13
					| GPIO_MODER_MODE14
					| GPIO_MODER_MODE15);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE12_Pos
 8000246:	4b3c      	ldr	r3, [pc, #240]	; (8000338 <cr_task1+0x110>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a3b      	ldr	r2, [pc, #236]	; (8000338 <cr_task1+0x110>)
 800024c:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000250:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE13_Pos
				  | 1 << GPIO_MODER_MODE14_Pos
				  | 1 << GPIO_MODER_MODE15_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12);
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <cr_task1+0x114>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a39      	ldr	r2, [pc, #228]	; (800033c <cr_task1+0x114>)
 8000258:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800025c:	6013      	str	r3, [r2, #0]

	uint32_t press_count = 0;
 800025e:	2300      	movs	r3, #0
 8000260:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t is_pressed = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t frame = 0;
 8000266:	2300      	movs	r3, #0
 8000268:	647b      	str	r3, [r7, #68]	; 0x44

	uint32_t victory_frames[] = { 0b0001,
 800026a:	4b35      	ldr	r3, [pc, #212]	; (8000340 <cr_task1+0x118>)
 800026c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000270:	461d      	mov	r5, r3
 8000272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000276:	e895 0003 	ldmia.w	r5, {r0, r1}
 800027a:	e884 0003 	stmia.w	r4, {r0, r1}
								  0b0100,
								  0b1000,
								  0b0100,
								  0b0010 };

	uint32_t error_frames[] = { 0b0000,
 800027e:	4b31      	ldr	r3, [pc, #196]	; (8000344 <cr_task1+0x11c>)
 8000280:	1d3c      	adds	r4, r7, #4
 8000282:	461d      	mov	r5, r3
 8000284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800028c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
								0b1111,
								0b0111,
								0b0011,
								0b0001};

	uint32_t victory_num_of_frames = sizeof(victory_frames) / sizeof(victory_frames[0]);
 8000290:	2306      	movs	r3, #6
 8000292:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t error_num_of_frames = sizeof(error_frames) / sizeof(error_frames[0]);
 8000294:	2308      	movs	r3, #8
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c

	while(1)
	{
		dumb_delay(100000);
 8000298:	482b      	ldr	r0, [pc, #172]	; (8000348 <cr_task1+0x120>)
 800029a:	f000 f857 	bl	800034c <dumb_delay>

		GPIOE->ODR &= 0b0000 << GPIO_ODR_OD12_Pos;
 800029e:	4b26      	ldr	r3, [pc, #152]	; (8000338 <cr_task1+0x110>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <cr_task1+0x110>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	615a      	str	r2, [r3, #20]

		if(press_count == 0)
 80002a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d113      	bne.n	80002d6 <cr_task1+0xae>
		{
			if(frame >= victory_num_of_frames)
 80002ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80002b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d301      	bcc.n	80002ba <cr_task1+0x92>
				frame = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	647b      	str	r3, [r7, #68]	; 0x44
			GPIOE->ODR |= victory_frames[frame] << GPIO_ODR_OD12_Pos;
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <cr_task1+0x110>)
 80002bc:	695a      	ldr	r2, [r3, #20]
 80002be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002c0:	009b      	lsls	r3, r3, #2
 80002c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80002c6:	440b      	add	r3, r1
 80002c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80002cc:	031b      	lsls	r3, r3, #12
 80002ce:	491a      	ldr	r1, [pc, #104]	; (8000338 <cr_task1+0x110>)
 80002d0:	4313      	orrs	r3, r2
 80002d2:	614b      	str	r3, [r1, #20]
 80002d4:	e012      	b.n	80002fc <cr_task1+0xd4>
		}
		else
		{
			if(frame >= error_num_of_frames)
 80002d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80002d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002da:	429a      	cmp	r2, r3
 80002dc:	d301      	bcc.n	80002e2 <cr_task1+0xba>
				frame = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
			GPIOE->ODR |= error_frames[frame] << GPIO_ODR_OD12_Pos;
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <cr_task1+0x110>)
 80002e4:	695a      	ldr	r2, [r3, #20]
 80002e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80002ee:	440b      	add	r3, r1
 80002f0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80002f4:	031b      	lsls	r3, r3, #12
 80002f6:	4910      	ldr	r1, [pc, #64]	; (8000338 <cr_task1+0x110>)
 80002f8:	4313      	orrs	r3, r2
 80002fa:	614b      	str	r3, [r1, #20]
		}

		if((GPIOB->IDR & GPIO_IDR_ID12) == 0 && is_pressed == 0)
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <cr_task1+0x114>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000304:	2b00      	cmp	r3, #0
 8000306:	d109      	bne.n	800031c <cr_task1+0xf4>
 8000308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800030a:	2b00      	cmp	r3, #0
 800030c:	d106      	bne.n	800031c <cr_task1+0xf4>
		{
			is_pressed = 1;
 800030e:	2301      	movs	r3, #1
 8000310:	64bb      	str	r3, [r7, #72]	; 0x48
			press_count ^= 0b00000001;		//меняет значение переменной с 0 на 1 или с 1 на 0
 8000312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000314:	f083 0301 	eor.w	r3, r3, #1
 8000318:	64fb      	str	r3, [r7, #76]	; 0x4c
 800031a:	e007      	b.n	800032c <cr_task1+0x104>
		}
		else if(GPIOB->IDR & GPIO_IDR_ID12)
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <cr_task1+0x114>)
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <cr_task1+0x104>
			is_pressed = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	64bb      	str	r3, [r7, #72]	; 0x48

		frame++;
 800032c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800032e:	3301      	adds	r3, #1
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
		dumb_delay(100000);
 8000332:	e7b1      	b.n	8000298 <cr_task1+0x70>
 8000334:	40021000 	.word	0x40021000
 8000338:	48001000 	.word	0x48001000
 800033c:	48000400 	.word	0x48000400
 8000340:	0800042c 	.word	0x0800042c
 8000344:	08000444 	.word	0x08000444
 8000348:	000186a0 	.word	0x000186a0

0800034c <dumb_delay>:
	}
}

void dumb_delay(uint32_t duration)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0; i<duration; i++);
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e002      	b.n	8000360 <dumb_delay+0x14>
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fa      	ldr	r2, [r7, #12]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	429a      	cmp	r2, r3
 8000366:	d3f8      	bcc.n	800035a <dumb_delay+0xe>
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
	...

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff35 	bl	8000218 <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC1_2_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	08000464 	.word	0x08000464
 8000408:	08000464 	.word	0x08000464
 800040c:	08000464 	.word	0x08000464
 8000410:	08000468 	.word	0x08000468

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
