
LW2_Interrupts_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  4 .ARM          00000000  080004fc  080004fc  00010504  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004fc  08000504  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000500  08000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00010504  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010504  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009c4  00000000  00000000  00010534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000018e  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00011088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000050  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7b7  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005f2  00000000  00000000  0002b8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bc66  00000000  00000000  0002bee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c7b4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000d8  00000000  00000000  000c7ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080004e4 	.word	0x080004e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	080004e4 	.word	0x080004e4

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:

uint8_t buttons_curr = 0,
		buttons_prev = 0;

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
#if TASK == 1
	task1_3();
 8000258:	f000 f80a 	bl	8000270 <task1_3>
 800025c:	2300      	movs	r3, #0
#endif
}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}

08000262 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000262:	b580      	push	{r7, lr}
 8000264:	af00      	add	r7, sp, #0
#if TASK == 1
	task1_3_interrupt();
 8000266:	f000 f863 	bl	8000330 <task1_3_interrupt>
#endif
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <task1_3>:

void task1_3()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    // Включить тактирование
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 8000274:	4b27      	ldr	r3, [pc, #156]	; (8000314 <task1_3+0xa4>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	4a26      	ldr	r2, [pc, #152]	; (8000314 <task1_3+0xa4>)
 800027a:	f043 030a 	orr.w	r3, r3, #10
 800027e:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000280:	4b24      	ldr	r3, [pc, #144]	; (8000314 <task1_3+0xa4>)
 8000282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000284:	4a23      	ldr	r2, [pc, #140]	; (8000314 <task1_3+0xa4>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6613      	str	r3, [r2, #96]	; 0x60

    // Выбрать порт, ножка с которого будет использоваться
    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <task1_3+0xa8>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a21      	ldr	r2, [pc, #132]	; (8000318 <task1_3+0xa8>)
 8000292:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000296:	f043 0311 	orr.w	r3, r3, #17
 800029a:	6153      	str	r3, [r2, #20]
    				   | SYSCFG_EXTICR4_EXTI13_PB
					   | SYSCFG_EXTICR4_EXTI14_PB
					   | SYSCFG_EXTICR4_EXTI15_PB;

    // Настроить нужное внешнее прерывание
    EXTI->IMR1 |= EXTI_IMR1_IM12
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <task1_3+0xac>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <task1_3+0xac>)
 80002a2:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002a6:	6013      	str	r3, [r2, #0]
    			| EXTI_IMR1_IM13
				| EXTI_IMR1_IM14
				| EXTI_IMR1_IM15;
    EXTI->RTSR1 |= EXTI_RTSR1_RT12
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <task1_3+0xac>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <task1_3+0xac>)
 80002ae:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002b2:	6093      	str	r3, [r2, #8]
    			 | EXTI_RTSR1_RT13
				 | EXTI_RTSR1_RT14
				 | EXTI_RTSR1_RT15;
    EXTI->FTSR1 |= EXTI_FTSR1_FT12
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <task1_3+0xac>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a18      	ldr	r2, [pc, #96]	; (800031c <task1_3+0xac>)
 80002ba:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80002be:	60d3      	str	r3, [r2, #12]
    			 | EXTI_FTSR1_FT13
				 | EXTI_FTSR1_FT14
				 | EXTI_FTSR1_FT15;
    NVIC_EnableIRQ( EXTI15_10_IRQn );
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f7ff ffa9 	bl	8000218 <__NVIC_EnableIRQ>

    // Настроить входы-выходы
    GPIOB->MODER &= ~(GPIO_MODER_MODE12_Msk
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <task1_3+0xb0>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a15      	ldr	r2, [pc, #84]	; (8000320 <task1_3+0xb0>)
 80002cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002d0:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE13_Msk
					| GPIO_MODER_MODE14_Msk
					| GPIO_MODER_MODE15_Msk);

    GPIOD->MODER &= ~(GPIO_MODER_MODE10_Msk
 80002d2:	4b14      	ldr	r3, [pc, #80]	; (8000324 <task1_3+0xb4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a13      	ldr	r2, [pc, #76]	; (8000324 <task1_3+0xb4>)
 80002d8:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80002dc:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE11_Msk
					| GPIO_MODER_MODE12_Msk
					| GPIO_MODER_MODE13_Msk);
    GPIOD->MODER |= 1 << GPIO_MODER_MODE10_Pos
 80002de:	4b11      	ldr	r3, [pc, #68]	; (8000324 <task1_3+0xb4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a10      	ldr	r2, [pc, #64]	; (8000324 <task1_3+0xb4>)
 80002e4:	f043 63aa 	orr.w	r3, r3, #89128960	; 0x5500000
 80002e8:	6013      	str	r3, [r2, #0]
				  | 1 << GPIO_MODER_MODE12_Pos
				  | 1 << GPIO_MODER_MODE13_Pos;

	while(1)
	{
		if(buttons_prev != buttons_curr)
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <task1_3+0xb8>)
 80002ec:	781a      	ldrb	r2, [r3, #0]
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <task1_3+0xbc>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d0f9      	beq.n	80002ea <task1_3+0x7a>
		{
			buttons_prev = buttons_curr;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <task1_3+0xbc>)
 80002f8:	781a      	ldrb	r2, [r3, #0]
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <task1_3+0xb8>)
 80002fc:	701a      	strb	r2, [r3, #0]
			GPIOD->BSRR = GPIO_BSRR_BR10
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <task1_3+0xb4>)
 8000300:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
 8000304:	619a      	str	r2, [r3, #24]
						| GPIO_BSRR_BR11
						| GPIO_BSRR_BR12
						| GPIO_BSRR_BR13;
			GPIOD->BSRR = buttons_curr << GPIO_BSRR_BS10_Pos;
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <task1_3+0xbc>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	029a      	lsls	r2, r3, #10
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <task1_3+0xb4>)
 800030e:	619a      	str	r2, [r3, #24]
		if(buttons_prev != buttons_curr)
 8000310:	e7eb      	b.n	80002ea <task1_3+0x7a>
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40010000 	.word	0x40010000
 800031c:	40010400 	.word	0x40010400
 8000320:	48000400 	.word	0x48000400
 8000324:	48000c00 	.word	0x48000c00
 8000328:	2000001d 	.word	0x2000001d
 800032c:	2000001c 	.word	0x2000001c

08000330 <task1_3_interrupt>:
		}
	}
}

void task1_3_interrupt()
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    if(EXTI->PR1 & EXTI_PR1_PIF12)
 8000334:	4b41      	ldr	r3, [pc, #260]	; (800043c <task1_3_interrupt+0x10c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800033c:	2b00      	cmp	r3, #0
 800033e:	d019      	beq.n	8000374 <task1_3_interrupt+0x44>
    {
    	if(!(GPIOB->IDR & GPIO_IDR_ID12))
 8000340:	4b3f      	ldr	r3, [pc, #252]	; (8000440 <task1_3_interrupt+0x110>)
 8000342:	691b      	ldr	r3, [r3, #16]
 8000344:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d107      	bne.n	800035c <task1_3_interrupt+0x2c>
    	{
    		buttons_curr |= 1 << 3;
 800034c:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <task1_3_interrupt+0x114>)
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b3b      	ldr	r3, [pc, #236]	; (8000444 <task1_3_interrupt+0x114>)
 8000358:	701a      	strb	r2, [r3, #0]
 800035a:	e006      	b.n	800036a <task1_3_interrupt+0x3a>
    	}
    	else
    	{
    		buttons_curr &= 0b0111;
 800035c:	4b39      	ldr	r3, [pc, #228]	; (8000444 <task1_3_interrupt+0x114>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	f003 0307 	and.w	r3, r3, #7
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4b37      	ldr	r3, [pc, #220]	; (8000444 <task1_3_interrupt+0x114>)
 8000368:	701a      	strb	r2, [r3, #0]
    	}

        EXTI->PR1 = EXTI_PR1_PIF12;
 800036a:	4b34      	ldr	r3, [pc, #208]	; (800043c <task1_3_interrupt+0x10c>)
 800036c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000370:	615a      	str	r2, [r3, #20]
    		buttons_curr &= 0b1110;
    	}

        EXTI->PR1 = EXTI_PR1_PIF15;
    }
}
 8000372:	e05e      	b.n	8000432 <task1_3_interrupt+0x102>
    else if (EXTI->PR1 & EXTI_PR1_PIF13)
 8000374:	4b31      	ldr	r3, [pc, #196]	; (800043c <task1_3_interrupt+0x10c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800037c:	2b00      	cmp	r3, #0
 800037e:	d019      	beq.n	80003b4 <task1_3_interrupt+0x84>
    	if(!(GPIOB->IDR & GPIO_IDR_ID13))
 8000380:	4b2f      	ldr	r3, [pc, #188]	; (8000440 <task1_3_interrupt+0x110>)
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000388:	2b00      	cmp	r3, #0
 800038a:	d107      	bne.n	800039c <task1_3_interrupt+0x6c>
    		buttons_curr |= 1 << 2;
 800038c:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <task1_3_interrupt+0x114>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	f043 0304 	orr.w	r3, r3, #4
 8000394:	b2da      	uxtb	r2, r3
 8000396:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <task1_3_interrupt+0x114>)
 8000398:	701a      	strb	r2, [r3, #0]
 800039a:	e006      	b.n	80003aa <task1_3_interrupt+0x7a>
    		buttons_curr &= 0b1011;
 800039c:	4b29      	ldr	r3, [pc, #164]	; (8000444 <task1_3_interrupt+0x114>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	f003 030b 	and.w	r3, r3, #11
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b27      	ldr	r3, [pc, #156]	; (8000444 <task1_3_interrupt+0x114>)
 80003a8:	701a      	strb	r2, [r3, #0]
        EXTI->PR1 = EXTI_PR1_PIF13;
 80003aa:	4b24      	ldr	r3, [pc, #144]	; (800043c <task1_3_interrupt+0x10c>)
 80003ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003b0:	615a      	str	r2, [r3, #20]
}
 80003b2:	e03e      	b.n	8000432 <task1_3_interrupt+0x102>
    else if (EXTI->PR1 & EXTI_PR1_PIF14)
 80003b4:	4b21      	ldr	r3, [pc, #132]	; (800043c <task1_3_interrupt+0x10c>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d019      	beq.n	80003f4 <task1_3_interrupt+0xc4>
    	if(!(GPIOB->IDR & GPIO_IDR_ID14))
 80003c0:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <task1_3_interrupt+0x110>)
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d107      	bne.n	80003dc <task1_3_interrupt+0xac>
    		buttons_curr |= 1 << 1;
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <task1_3_interrupt+0x114>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <task1_3_interrupt+0x114>)
 80003d8:	701a      	strb	r2, [r3, #0]
 80003da:	e006      	b.n	80003ea <task1_3_interrupt+0xba>
    		buttons_curr &= 0b1101;
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <task1_3_interrupt+0x114>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	f003 030d 	and.w	r3, r3, #13
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <task1_3_interrupt+0x114>)
 80003e8:	701a      	strb	r2, [r3, #0]
        EXTI->PR1 = EXTI_PR1_PIF14;
 80003ea:	4b14      	ldr	r3, [pc, #80]	; (800043c <task1_3_interrupt+0x10c>)
 80003ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003f0:	615a      	str	r2, [r3, #20]
}
 80003f2:	e01e      	b.n	8000432 <task1_3_interrupt+0x102>
    else if (EXTI->PR1 & EXTI_PR1_PIF15)
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <task1_3_interrupt+0x10c>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d018      	beq.n	8000432 <task1_3_interrupt+0x102>
    	if(!(GPIOB->IDR & GPIO_IDR_ID15))
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <task1_3_interrupt+0x110>)
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000408:	2b00      	cmp	r3, #0
 800040a:	d107      	bne.n	800041c <task1_3_interrupt+0xec>
    		buttons_curr |= 1;
 800040c:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <task1_3_interrupt+0x114>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <task1_3_interrupt+0x114>)
 8000418:	701a      	strb	r2, [r3, #0]
 800041a:	e006      	b.n	800042a <task1_3_interrupt+0xfa>
    		buttons_curr &= 0b1110;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <task1_3_interrupt+0x114>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	f003 030e 	and.w	r3, r3, #14
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <task1_3_interrupt+0x114>)
 8000428:	701a      	strb	r2, [r3, #0]
        EXTI->PR1 = EXTI_PR1_PIF15;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <task1_3_interrupt+0x10c>)
 800042c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000430:	615a      	str	r2, [r3, #20]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40010400 	.word	0x40010400
 8000440:	48000400 	.word	0x48000400
 8000444:	2000001c 	.word	0x2000001c

08000448 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000448:	480d      	ldr	r0, [pc, #52]	; (8000480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800044a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800044c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000450:	480c      	ldr	r0, [pc, #48]	; (8000484 <LoopForever+0x6>)
  ldr r1, =_edata
 8000452:	490d      	ldr	r1, [pc, #52]	; (8000488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000454:	4a0d      	ldr	r2, [pc, #52]	; (800048c <LoopForever+0xe>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000458:	e002      	b.n	8000460 <LoopCopyDataInit>

0800045a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800045c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045e:	3304      	adds	r3, #4

08000460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000464:	d3f9      	bcc.n	800045a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000466:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000468:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <LoopForever+0x16>)
  movs r3, #0
 800046a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800046c:	e001      	b.n	8000472 <LoopFillZerobss>

0800046e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000470:	3204      	adds	r2, #4

08000472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000474:	d3fb      	bcc.n	800046e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000476:	f000 f811 	bl	800049c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047a:	f7ff feeb 	bl	8000254 <main>

0800047e <LoopForever>:

LoopForever:
    b LoopForever
 800047e:	e7fe      	b.n	800047e <LoopForever>
  ldr   r0, =_estack
 8000480:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800048c:	08000504 	.word	0x08000504
  ldr r2, =_sbss
 8000490:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000494:	20000020 	.word	0x20000020

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <__libc_init_array>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	4d0d      	ldr	r5, [pc, #52]	; (80004d4 <__libc_init_array+0x38>)
 80004a0:	4c0d      	ldr	r4, [pc, #52]	; (80004d8 <__libc_init_array+0x3c>)
 80004a2:	1b64      	subs	r4, r4, r5
 80004a4:	10a4      	asrs	r4, r4, #2
 80004a6:	2600      	movs	r6, #0
 80004a8:	42a6      	cmp	r6, r4
 80004aa:	d109      	bne.n	80004c0 <__libc_init_array+0x24>
 80004ac:	4d0b      	ldr	r5, [pc, #44]	; (80004dc <__libc_init_array+0x40>)
 80004ae:	4c0c      	ldr	r4, [pc, #48]	; (80004e0 <__libc_init_array+0x44>)
 80004b0:	f000 f818 	bl	80004e4 <_init>
 80004b4:	1b64      	subs	r4, r4, r5
 80004b6:	10a4      	asrs	r4, r4, #2
 80004b8:	2600      	movs	r6, #0
 80004ba:	42a6      	cmp	r6, r4
 80004bc:	d105      	bne.n	80004ca <__libc_init_array+0x2e>
 80004be:	bd70      	pop	{r4, r5, r6, pc}
 80004c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c4:	4798      	blx	r3
 80004c6:	3601      	adds	r6, #1
 80004c8:	e7ee      	b.n	80004a8 <__libc_init_array+0xc>
 80004ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ce:	4798      	blx	r3
 80004d0:	3601      	adds	r6, #1
 80004d2:	e7f2      	b.n	80004ba <__libc_init_array+0x1e>
 80004d4:	080004fc 	.word	0x080004fc
 80004d8:	080004fc 	.word	0x080004fc
 80004dc:	080004fc 	.word	0x080004fc
 80004e0:	08000500 	.word	0x08000500

080004e4 <_init>:
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e6:	bf00      	nop
 80004e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ea:	bc08      	pop	{r3}
 80004ec:	469e      	mov	lr, r3
 80004ee:	4770      	bx	lr

080004f0 <_fini>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr
