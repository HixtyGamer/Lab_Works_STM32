
LW2_Interrupts_p2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800059c  0800059c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005a0  080005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a4a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001b2  00000000  00000000  00020a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00020c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  00020cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7b7  00000000  00000000  00020d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006dd  00000000  00000000  0003b4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bc95  00000000  00000000  0003bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d7841  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000013c  00000000  00000000  000d7894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000584 	.word	0x08000584

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000584 	.word	0x08000584

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	2b00      	cmp	r3, #0
 8000264:	db12      	blt.n	800028c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 021f 	and.w	r2, r3, #31
 800026c:	490a      	ldr	r1, [pc, #40]	; (8000298 <__NVIC_DisableIRQ+0x44>)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	095b      	lsrs	r3, r3, #5
 8000274:	2001      	movs	r0, #1
 8000276:	fa00 f202 	lsl.w	r2, r0, r2
 800027a:	3320      	adds	r3, #32
 800027c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000280:	f3bf 8f4f 	dsb	sy
}
 8000284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000286:	f3bf 8f6f 	isb	sy
}
 800028a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100

0800029c <main>:
						  | 0b01 << 2
						  | 0b00,
		curr_combination = 0;

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
#if TASK == 1
	task1_3();
#elif TASK == 2
	task2_3();
 80002a0:	f000 f80a 	bl	80002b8 <task2_3>
 80002a4:	2300      	movs	r3, #0
#endif
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	bd80      	pop	{r7, pc}

080002aa <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	af00      	add	r7, sp, #0
#if TASK == 1
	task1_3_interrupt();
#elif TASK == 2
	task2_3_interrupt();
 80002ae:	f000 f867 	bl	8000380 <task2_3_interrupt>
#endif
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <task2_3>:
	GPIOD->BSRR = ~(((GPIOB->IDR >> GPIO_IDR_ID12_Pos) & 0b1111) << GPIO_BSRR_BS10_Pos);
	EXTI->PR1 = 0b1111 << EXTI_PR1_PIF12_Pos;
}

void task2_3()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIODEN;
 80002bc:	4b29      	ldr	r3, [pc, #164]	; (8000364 <task2_3+0xac>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c0:	4a28      	ldr	r2, [pc, #160]	; (8000364 <task2_3+0xac>)
 80002c2:	f043 030a 	orr.w	r3, r3, #10
 80002c6:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002c8:	4b26      	ldr	r3, [pc, #152]	; (8000364 <task2_3+0xac>)
 80002ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002cc:	4a25      	ldr	r2, [pc, #148]	; (8000364 <task2_3+0xac>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6613      	str	r3, [r2, #96]	; 0x60

    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <task2_3+0xb0>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <task2_3+0xb0>)
 80002da:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80002de:	f043 0311 	orr.w	r3, r3, #17
 80002e2:	6153      	str	r3, [r2, #20]
    				   | SYSCFG_EXTICR4_EXTI13_PB
					   | SYSCFG_EXTICR4_EXTI14_PB
					   | SYSCFG_EXTICR4_EXTI15_PB;

    GPIOB->MODER &= ~(GPIO_MODER_MODE12_Msk
 80002e4:	4b21      	ldr	r3, [pc, #132]	; (800036c <task2_3+0xb4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a20      	ldr	r2, [pc, #128]	; (800036c <task2_3+0xb4>)
 80002ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002ee:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE13_Msk
					| GPIO_MODER_MODE14_Msk
					| GPIO_MODER_MODE15_Msk);

    GPIOD->MODER &= ~(GPIO_MODER_MODE10_Msk
 80002f0:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <task2_3+0xb8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <task2_3+0xb8>)
 80002f6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80002fa:	6013      	str	r3, [r2, #0]
    				| GPIO_MODER_MODE11_Msk
					| GPIO_MODER_MODE12_Msk
					| GPIO_MODER_MODE13_Msk);
    GPIOD->MODER |= 1 << GPIO_MODER_MODE10_Pos
 80002fc:	4b1c      	ldr	r3, [pc, #112]	; (8000370 <task2_3+0xb8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1b      	ldr	r2, [pc, #108]	; (8000370 <task2_3+0xb8>)
 8000302:	f043 63aa 	orr.w	r3, r3, #89128960	; 0x5500000
 8000306:	6013      	str	r3, [r2, #0]
    			  | 1 << GPIO_MODER_MODE11_Pos
				  | 1 << GPIO_MODER_MODE12_Pos
				  | 1 << GPIO_MODER_MODE13_Pos;

    EXTI->IMR1 |= EXTI_IMR1_IM12
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <task2_3+0xbc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <task2_3+0xbc>)
 800030e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000312:	6013      	str	r3, [r2, #0]
    			| EXTI_IMR1_IM13
				| EXTI_IMR1_IM14
				| EXTI_IMR1_IM15;
    EXTI->RTSR1 |= EXTI_RTSR1_RT12
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <task2_3+0xbc>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	4a16      	ldr	r2, [pc, #88]	; (8000374 <task2_3+0xbc>)
 800031a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800031e:	6093      	str	r3, [r2, #8]
    			 | EXTI_RTSR1_RT13
				 | EXTI_RTSR1_RT14
				 | EXTI_RTSR1_RT15;
    EXTI->FTSR1 |= EXTI_FTSR1_FT12
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <task2_3+0xbc>)
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	4a13      	ldr	r2, [pc, #76]	; (8000374 <task2_3+0xbc>)
 8000326:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800032a:	60d3      	str	r3, [r2, #12]
    			 | EXTI_FTSR1_FT13
				 | EXTI_FTSR1_FT14
				 | EXTI_FTSR1_FT15;
    NVIC_EnableIRQ( EXTI15_10_IRQn );
 800032c:	2028      	movs	r0, #40	; 0x28
 800032e:	f7ff ff73 	bl	8000218 <__NVIC_EnableIRQ>

    curr_combination |= (~(right_combination >> 14) & 0b11);
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <task2_3+0xc0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	139b      	asrs	r3, r3, #14
 8000338:	43db      	mvns	r3, r3
 800033a:	f003 0203 	and.w	r2, r3, #3
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <task2_3+0xc4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4313      	orrs	r3, r2
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <task2_3+0xc4>)
 8000346:	6013      	str	r3, [r2, #0]

	while(1)
	{
		if(curr_combination == right_combination)
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <task2_3+0xc4>)
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <task2_3+0xc0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	429a      	cmp	r2, r3
 8000352:	d1f9      	bne.n	8000348 <task2_3+0x90>
		{
			GPIOD->BSRR = 0b1111 << GPIO_BSRR_BS10_Pos;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <task2_3+0xb8>)
 8000356:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800035a:	619a      	str	r2, [r3, #24]
			NVIC_DisableIRQ( EXTI15_10_IRQn );
 800035c:	2028      	movs	r0, #40	; 0x28
 800035e:	f7ff ff79 	bl	8000254 <__NVIC_DisableIRQ>

			while(1)
 8000362:	e7fe      	b.n	8000362 <task2_3+0xaa>
 8000364:	40021000 	.word	0x40021000
 8000368:	40010000 	.word	0x40010000
 800036c:	48000400 	.word	0x48000400
 8000370:	48000c00 	.word	0x48000c00
 8000374:	40010400 	.word	0x40010400
 8000378:	20000000 	.word	0x20000000
 800037c:	20000020 	.word	0x20000020

08000380 <task2_3_interrupt>:
		}
	}
}

void task2_3_interrupt()
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    if(EXTI->PR1 & EXTI_PR1_PIF12)
 8000384:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <task2_3_interrupt+0x158>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800038c:	2b00      	cmp	r3, #0
 800038e:	d021      	beq.n	80003d4 <task2_3_interrupt+0x54>
    {
    	if(!(GPIOB->IDR & GPIO_IDR_ID12))
 8000390:	4b52      	ldr	r3, [pc, #328]	; (80004dc <task2_3_interrupt+0x15c>)
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d112      	bne.n	80003c2 <task2_3_interrupt+0x42>
    	{
    		curr_combination = curr_combination << 2;
 800039c:	4b50      	ldr	r3, [pc, #320]	; (80004e0 <task2_3_interrupt+0x160>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4a4f      	ldr	r2, [pc, #316]	; (80004e0 <task2_3_interrupt+0x160>)
 80003a4:	6013      	str	r3, [r2, #0]
    		curr_combination &= 0xFFFF;
 80003a6:	4b4e      	ldr	r3, [pc, #312]	; (80004e0 <task2_3_interrupt+0x160>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	4a4c      	ldr	r2, [pc, #304]	; (80004e0 <task2_3_interrupt+0x160>)
 80003ae:	6013      	str	r3, [r2, #0]
    		curr_combination |= 0b00;
 80003b0:	4b4b      	ldr	r3, [pc, #300]	; (80004e0 <task2_3_interrupt+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a4a      	ldr	r2, [pc, #296]	; (80004e0 <task2_3_interrupt+0x160>)
 80003b6:	6013      	str	r3, [r2, #0]
    		GPIOD->BSRR = 1 << GPIO_BSRR_BS10_Pos;
 80003b8:	4b4a      	ldr	r3, [pc, #296]	; (80004e4 <task2_3_interrupt+0x164>)
 80003ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003be:	619a      	str	r2, [r3, #24]
 80003c0:	e003      	b.n	80003ca <task2_3_interrupt+0x4a>
    	}
    	else
    	{
			GPIOD->BSRR = 1 << GPIO_BSRR_BR10_Pos;
 80003c2:	4b48      	ldr	r3, [pc, #288]	; (80004e4 <task2_3_interrupt+0x164>)
 80003c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80003c8:	619a      	str	r2, [r3, #24]
    	}

        EXTI->PR1 = EXTI_PR1_PIF12;
 80003ca:	4b43      	ldr	r3, [pc, #268]	; (80004d8 <task2_3_interrupt+0x158>)
 80003cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003d0:	615a      	str	r2, [r3, #20]
    		GPIOD->BSRR = 1 << GPIO_BSRR_BR13_Pos;
    	}

        EXTI->PR1 = EXTI_PR1_PIF15;
    }
}
 80003d2:	e07c      	b.n	80004ce <task2_3_interrupt+0x14e>
    else if (EXTI->PR1 & EXTI_PR1_PIF13)
 80003d4:	4b40      	ldr	r3, [pc, #256]	; (80004d8 <task2_3_interrupt+0x158>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d023      	beq.n	8000428 <task2_3_interrupt+0xa8>
    	if(!(GPIOB->IDR & GPIO_IDR_ID13))
 80003e0:	4b3e      	ldr	r3, [pc, #248]	; (80004dc <task2_3_interrupt+0x15c>)
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d114      	bne.n	8000416 <task2_3_interrupt+0x96>
    		curr_combination = curr_combination << 2;
 80003ec:	4b3c      	ldr	r3, [pc, #240]	; (80004e0 <task2_3_interrupt+0x160>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4a3b      	ldr	r2, [pc, #236]	; (80004e0 <task2_3_interrupt+0x160>)
 80003f4:	6013      	str	r3, [r2, #0]
    		curr_combination &= 0xFFFF;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <task2_3_interrupt+0x160>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	4a38      	ldr	r2, [pc, #224]	; (80004e0 <task2_3_interrupt+0x160>)
 80003fe:	6013      	str	r3, [r2, #0]
    		curr_combination |= 0b01;
 8000400:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <task2_3_interrupt+0x160>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	4a35      	ldr	r2, [pc, #212]	; (80004e0 <task2_3_interrupt+0x160>)
 800040a:	6013      	str	r3, [r2, #0]
    		GPIOD->BSRR = 1 << GPIO_BSRR_BS11_Pos;
 800040c:	4b35      	ldr	r3, [pc, #212]	; (80004e4 <task2_3_interrupt+0x164>)
 800040e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000412:	619a      	str	r2, [r3, #24]
 8000414:	e003      	b.n	800041e <task2_3_interrupt+0x9e>
    		GPIOD->BSRR = 1 << GPIO_BSRR_BR11_Pos;
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <task2_3_interrupt+0x164>)
 8000418:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800041c:	619a      	str	r2, [r3, #24]
        EXTI->PR1 = EXTI_PR1_PIF13;
 800041e:	4b2e      	ldr	r3, [pc, #184]	; (80004d8 <task2_3_interrupt+0x158>)
 8000420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000424:	615a      	str	r2, [r3, #20]
}
 8000426:	e052      	b.n	80004ce <task2_3_interrupt+0x14e>
    else if (EXTI->PR1 & EXTI_PR1_PIF14)
 8000428:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <task2_3_interrupt+0x158>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d023      	beq.n	800047c <task2_3_interrupt+0xfc>
    	if(!(GPIOB->IDR & GPIO_IDR_ID14))
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <task2_3_interrupt+0x15c>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d114      	bne.n	800046a <task2_3_interrupt+0xea>
    		curr_combination = curr_combination << 2;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <task2_3_interrupt+0x160>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <task2_3_interrupt+0x160>)
 8000448:	6013      	str	r3, [r2, #0]
    		curr_combination &= 0xFFFF;
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <task2_3_interrupt+0x160>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	4a23      	ldr	r2, [pc, #140]	; (80004e0 <task2_3_interrupt+0x160>)
 8000452:	6013      	str	r3, [r2, #0]
    		curr_combination |= 0b10;
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <task2_3_interrupt+0x160>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	4a20      	ldr	r2, [pc, #128]	; (80004e0 <task2_3_interrupt+0x160>)
 800045e:	6013      	str	r3, [r2, #0]
    		GPIOD->BSRR = 1 << GPIO_BSRR_BS12_Pos;
 8000460:	4b20      	ldr	r3, [pc, #128]	; (80004e4 <task2_3_interrupt+0x164>)
 8000462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e003      	b.n	8000472 <task2_3_interrupt+0xf2>
    		GPIOD->BSRR = 1 << GPIO_BSRR_BR12_Pos;
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <task2_3_interrupt+0x164>)
 800046c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000470:	619a      	str	r2, [r3, #24]
        EXTI->PR1 = EXTI_PR1_PIF14;
 8000472:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <task2_3_interrupt+0x158>)
 8000474:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000478:	615a      	str	r2, [r3, #20]
}
 800047a:	e028      	b.n	80004ce <task2_3_interrupt+0x14e>
    else if (EXTI->PR1 & EXTI_PR1_PIF15)
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <task2_3_interrupt+0x158>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d022      	beq.n	80004ce <task2_3_interrupt+0x14e>
    	if(!(GPIOB->IDR & GPIO_IDR_ID15))
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <task2_3_interrupt+0x15c>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000490:	2b00      	cmp	r3, #0
 8000492:	d114      	bne.n	80004be <task2_3_interrupt+0x13e>
    		curr_combination = curr_combination << 2;
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <task2_3_interrupt+0x160>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <task2_3_interrupt+0x160>)
 800049c:	6013      	str	r3, [r2, #0]
    		curr_combination &= 0xFFFF;
 800049e:	4b10      	ldr	r3, [pc, #64]	; (80004e0 <task2_3_interrupt+0x160>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <task2_3_interrupt+0x160>)
 80004a6:	6013      	str	r3, [r2, #0]
    		curr_combination |= 0b11;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <task2_3_interrupt+0x160>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f043 0303 	orr.w	r3, r3, #3
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <task2_3_interrupt+0x160>)
 80004b2:	6013      	str	r3, [r2, #0]
    		GPIOD->BSRR = 1 << GPIO_BSRR_BS13_Pos;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <task2_3_interrupt+0x164>)
 80004b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ba:	619a      	str	r2, [r3, #24]
 80004bc:	e003      	b.n	80004c6 <task2_3_interrupt+0x146>
    		GPIOD->BSRR = 1 << GPIO_BSRR_BR13_Pos;
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <task2_3_interrupt+0x164>)
 80004c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80004c4:	619a      	str	r2, [r3, #24]
        EXTI->PR1 = EXTI_PR1_PIF15;
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <task2_3_interrupt+0x158>)
 80004c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004cc:	615a      	str	r2, [r3, #20]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40010400 	.word	0x40010400
 80004dc:	48000400 	.word	0x48000400
 80004e0:	20000020 	.word	0x20000020
 80004e4:	48000c00 	.word	0x48000c00

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f000 f811 	bl	800053c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff febf 	bl	800029c <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800052c:	080005a4 	.word	0x080005a4
  ldr r2, =_sbss
 8000530:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000534:	20000024 	.word	0x20000024

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <__libc_init_array>:
 800053c:	b570      	push	{r4, r5, r6, lr}
 800053e:	4d0d      	ldr	r5, [pc, #52]	; (8000574 <__libc_init_array+0x38>)
 8000540:	4c0d      	ldr	r4, [pc, #52]	; (8000578 <__libc_init_array+0x3c>)
 8000542:	1b64      	subs	r4, r4, r5
 8000544:	10a4      	asrs	r4, r4, #2
 8000546:	2600      	movs	r6, #0
 8000548:	42a6      	cmp	r6, r4
 800054a:	d109      	bne.n	8000560 <__libc_init_array+0x24>
 800054c:	4d0b      	ldr	r5, [pc, #44]	; (800057c <__libc_init_array+0x40>)
 800054e:	4c0c      	ldr	r4, [pc, #48]	; (8000580 <__libc_init_array+0x44>)
 8000550:	f000 f818 	bl	8000584 <_init>
 8000554:	1b64      	subs	r4, r4, r5
 8000556:	10a4      	asrs	r4, r4, #2
 8000558:	2600      	movs	r6, #0
 800055a:	42a6      	cmp	r6, r4
 800055c:	d105      	bne.n	800056a <__libc_init_array+0x2e>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f855 3b04 	ldr.w	r3, [r5], #4
 8000564:	4798      	blx	r3
 8000566:	3601      	adds	r6, #1
 8000568:	e7ee      	b.n	8000548 <__libc_init_array+0xc>
 800056a:	f855 3b04 	ldr.w	r3, [r5], #4
 800056e:	4798      	blx	r3
 8000570:	3601      	adds	r6, #1
 8000572:	e7f2      	b.n	800055a <__libc_init_array+0x1e>
 8000574:	0800059c 	.word	0x0800059c
 8000578:	0800059c 	.word	0x0800059c
 800057c:	0800059c 	.word	0x0800059c
 8000580:	080005a0 	.word	0x080005a0

08000584 <_init>:
 8000584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000586:	bf00      	nop
 8000588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058a:	bc08      	pop	{r3}
 800058c:	469e      	mov	lr, r3
 800058e:	4770      	bx	lr

08000590 <_fini>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr
