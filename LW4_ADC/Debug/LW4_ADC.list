
LW4_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a4  080006ac  000106ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a4  080006a4  000106ac  2**0
                  CONTENTS
  4 .ARM          00000000  080006a4  080006a4  000106ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a4  080006ac  000106ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000106ac  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fce  00000000  00000000  000106dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000230  00000000  00000000  000116aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000118e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00011990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7b7  00000000  00000000  00011a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000990  00000000  00000000  0002c1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009be49  00000000  00000000  0002cb6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000c89b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000200  00000000  00000000  000c8a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800068c 	.word	0x0800068c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	0800068c 	.word	0x0800068c

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
uint8_t interrupt_counter,					//нужна для работы точной задержки
		leds_to_light_up,
		leds_on = 0;

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
#elif TASK == 3
	task1_3();
#elif TASK == 4
	task2_1();
#elif TASK == 5
	task2_2();
 8000258:	f000 f818 	bl	800028c <task2_2>
 800025c:	2300      	movs	r3, #0
#elif TASK == 6
	task2_3();
#endif
}
 800025e:	4618      	mov	r0, r3
 8000260:	bd80      	pop	{r7, pc}
	...

08000264 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void)  //используется только для точной задержки
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	interrupt_counter = 0;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <TIM2_IRQHandler+0x24>)
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]

	TIM2->SR &= ~ TIM_SR_UIF;
 800026e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000278:	f023 0301 	bic.w	r3, r3, #1
 800027c:	6113      	str	r3, [r2, #16]
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	20000020 	.word	0x20000020

0800028c <task2_2>:
    	sleep(50);     //обновление ~20 раз/с
    }
}

void task2_2()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	setup_clock();
 8000290:	f000 f908 	bl	80004a4 <setup_clock>

    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN | RCC_AHB2ENR_GPIOEEN;
 8000294:	4b54      	ldr	r3, [pc, #336]	; (80003e8 <task2_2+0x15c>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000298:	4a53      	ldr	r2, [pc, #332]	; (80003e8 <task2_2+0x15c>)
 800029a:	f043 0314 	orr.w	r3, r3, #20
 800029e:	64d3      	str	r3, [r2, #76]	; 0x4c

    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80002a0:	4b51      	ldr	r3, [pc, #324]	; (80003e8 <task2_2+0x15c>)
 80002a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002a4:	4a50      	ldr	r2, [pc, #320]	; (80003e8 <task2_2+0x15c>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6593      	str	r3, [r2, #88]	; 0x58

    GPIOE->MODER &= ~(0xFFFF << GPIO_MODER_MODE0_Pos); //0b1111111111111111
 80002ac:	4b4f      	ldr	r3, [pc, #316]	; (80003ec <task2_2+0x160>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a4e      	ldr	r2, [pc, #312]	; (80003ec <task2_2+0x160>)
 80002b2:	0c1b      	lsrs	r3, r3, #16
 80002b4:	041b      	lsls	r3, r3, #16
 80002b6:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= 0x5555 << GPIO_MODER_MODE0_Pos;	   //0b0101010101010101
 80002b8:	4b4c      	ldr	r3, [pc, #304]	; (80003ec <task2_2+0x160>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a4b      	ldr	r2, [pc, #300]	; (80003ec <task2_2+0x160>)
 80002be:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80002c2:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002c6:	6013      	str	r3, [r2, #0]

    TIM2->DIER |= TIM_DIER_UIE;
 80002c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	60d3      	str	r3, [r2, #12]
  //TIM2->PSC = 19999;
    NVIC_EnableIRQ (TIM2_IRQn);
 80002d8:	201c      	movs	r0, #28
 80002da:	f7ff ff9d 	bl	8000218 <__NVIC_EnableIRQ>

    RCC->CCIPR |= (2U) << RCC_CCIPR_ADC12SEL_Pos;
 80002de:	4b42      	ldr	r3, [pc, #264]	; (80003e8 <task2_2+0x15c>)
 80002e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e4:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <task2_2+0x15c>)
 80002e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80002ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    RCC->AHB2ENR |= RCC_AHB2ENR_ADC12EN;
 80002ee:	4b3e      	ldr	r3, [pc, #248]	; (80003e8 <task2_2+0x15c>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a3d      	ldr	r2, [pc, #244]	; (80003e8 <task2_2+0x15c>)
 80002f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c

    ADC2->CR &= ~(ADC_CR_DEEPPWD);
 80002fa:	4b3d      	ldr	r3, [pc, #244]	; (80003f0 <task2_2+0x164>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	4a3c      	ldr	r2, [pc, #240]	; (80003f0 <task2_2+0x164>)
 8000300:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000304:	6093      	str	r3, [r2, #8]

    ADC2->CR |= ADC_CR_ADVREGEN;
 8000306:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <task2_2+0x164>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	4a39      	ldr	r2, [pc, #228]	; (80003f0 <task2_2+0x164>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	6093      	str	r3, [r2, #8]
    sleep(1);
 8000312:	2001      	movs	r0, #1
 8000314:	f000 f91c 	bl	8000550 <sleep>

    ADC2->CR |= ADC_CR_ADCAL;
 8000318:	4b35      	ldr	r3, [pc, #212]	; (80003f0 <task2_2+0x164>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <task2_2+0x164>)
 800031e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000322:	6093      	str	r3, [r2, #8]
    while ( ADC2->CR & ADC_CR_ADCAL ){}
 8000324:	bf00      	nop
 8000326:	4b32      	ldr	r3, [pc, #200]	; (80003f0 <task2_2+0x164>)
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	2b00      	cmp	r3, #0
 800032c:	dbfb      	blt.n	8000326 <task2_2+0x9a>

    ADC2->ISR |= ADC_ISR_ADRDY;
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <task2_2+0x164>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a2f      	ldr	r2, [pc, #188]	; (80003f0 <task2_2+0x164>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]
    ADC2->CR |= ADC_CR_ADEN;
 800033a:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <task2_2+0x164>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	4a2c      	ldr	r2, [pc, #176]	; (80003f0 <task2_2+0x164>)
 8000340:	f043 0301 	orr.w	r3, r3, #1
 8000344:	6093      	str	r3, [r2, #8]
    while ( !(ADC2->ISR & ADC_ISR_ADRDY) ){}
 8000346:	bf00      	nop
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <task2_2+0x164>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <task2_2+0xbc>

	ADC2->SMPR1 |= 2 << ADC_SMPR1_SMP6_Pos;
 8000354:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <task2_2+0x164>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a25      	ldr	r2, [pc, #148]	; (80003f0 <task2_2+0x164>)
 800035a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800035e:	6153      	str	r3, [r2, #20]

    ADC2->SQR1 |= 6 << ADC_SQR1_SQ1_Pos
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <task2_2+0x164>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a22      	ldr	r2, [pc, #136]	; (80003f0 <task2_2+0x164>)
 8000366:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
    			| 0 << ADC_SQR1_L_Pos;

	ADC2->CFGR |= ADC_CFGR_DMAEN | ADC_CFGR_DMACFG;
 800036c:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <task2_2+0x164>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a1f      	ldr	r2, [pc, #124]	; (80003f0 <task2_2+0x164>)
 8000372:	f043 0303 	orr.w	r3, r3, #3
 8000376:	60d3      	str	r3, [r2, #12]
	setup_adc_dma(current_adc_value, 1);
 8000378:	2101      	movs	r1, #1
 800037a:	481e      	ldr	r0, [pc, #120]	; (80003f4 <task2_2+0x168>)
 800037c:	f000 f840 	bl	8000400 <setup_adc_dma>

    while(1)
    {
		GPIOE->BSRR = 0xFF << GPIO_BSRR_BR0_Pos;
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <task2_2+0x160>)
 8000382:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000386:	619a      	str	r2, [r3, #24]
		GPIOE->BSRR = (1 << leds_to_light_up) << GPIO_BSRR_BS0_Pos;
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <task2_2+0x16c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	2301      	movs	r3, #1
 8000390:	fa03 f202 	lsl.w	r2, r3, r2
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <task2_2+0x160>)
 8000396:	619a      	str	r2, [r3, #24]

    	adc_manually_get_data();
 8000398:	f000 f868 	bl	800046c <adc_manually_get_data>

    	//значения частоты должны меняться от 0,5 Гц до 10 Гц, а задержка равна 1/частоту
    	//если считать задержку через частоту, то можно добиться линейного изменения частоты
    	delay_duration = 8192000 / (19 * current_adc_value[0] + 4096);  //если нужно будет, то объясню как я пришёл к этой формуле
 800039c:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <task2_2+0x168>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4613      	mov	r3, r2
 80003a4:	00db      	lsls	r3, r3, #3
 80003a6:	4413      	add	r3, r2
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	4413      	add	r3, r2
 80003ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80003b0:	f44f 02fa 	mov.w	r2, #8192000	; 0x7d0000
 80003b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80003b8:	b29a      	uxth	r2, r3
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <task2_2+0x170>)
 80003bc:	801a      	strh	r2, [r3, #0]

    	sleep(delay_duration);
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <task2_2+0x170>)
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f8c4 	bl	8000550 <sleep>

    	if(leds_to_light_up == 7)
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <task2_2+0x16c>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b07      	cmp	r3, #7
 80003ce:	d103      	bne.n	80003d8 <task2_2+0x14c>
    	{
    		leds_to_light_up = 0;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <task2_2+0x16c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e7d3      	b.n	8000380 <task2_2+0xf4>
    	}
    	else
    	{
    		leds_to_light_up++;
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <task2_2+0x16c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	3301      	adds	r3, #1
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <task2_2+0x16c>)
 80003e2:	701a      	strb	r2, [r3, #0]
		GPIOE->BSRR = 0xFF << GPIO_BSRR_BR0_Pos;
 80003e4:	e7cc      	b.n	8000380 <task2_2+0xf4>
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000
 80003ec:	48001000 	.word	0x48001000
 80003f0:	50000100 	.word	0x50000100
 80003f4:	2000001c 	.word	0x2000001c
 80003f8:	20000021 	.word	0x20000021
 80003fc:	2000001e 	.word	0x2000001e

08000400 <setup_adc_dma>:
    	}
    }
}

void setup_adc_dma( uint16_t *array_to_write_to, uint8_t ch_count )
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
    // Включить тактирование DMA
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMAMUX1EN;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <setup_adc_dma+0x5c>)
 800040e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000410:	4a12      	ldr	r2, [pc, #72]	; (800045c <setup_adc_dma+0x5c>)
 8000412:	f043 0305 	orr.w	r3, r3, #5
 8000416:	6493      	str	r3, [r2, #72]	; 0x48

    // Настроить адрес откуда будет происходить чтение
    DMA1_Channel1->CPAR = (uint32_t)&(ADC2->DR);
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <setup_adc_dma+0x60>)
 800041a:	4a12      	ldr	r2, [pc, #72]	; (8000464 <setup_adc_dma+0x64>)
 800041c:	609a      	str	r2, [r3, #8]

    // Настроить адрес куда будет происходить записью надо напрямую преобразовать
    // адрес в число типа uin32_t, так как все адреса - 32 значения.
    DMA1_Channel1->CMAR = (uint32_t)array_to_write_to;
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <setup_adc_dma+0x60>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	60d3      	str	r3, [r2, #12]

    // Настроить количество значений, которые мы хотим считать.
    DMA1_Channel1->CNDTR = ch_count;
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <setup_adc_dma+0x60>)
 8000426:	78fb      	ldrb	r3, [r7, #3]
 8000428:	6053      	str	r3, [r2, #4]

    // Настроить канал DMA: размер данных 16 бит источник и приемник, циклический
    // режи, увеличивать указатель при записи.
    DMA1_Channel1->CCR |= 1 << DMA_CCR_MSIZE_Pos | 1 << DMA_CCR_PSIZE_Pos
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <setup_adc_dma+0x60>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a0c      	ldr	r2, [pc, #48]	; (8000460 <setup_adc_dma+0x60>)
 8000430:	f443 63b4 	orr.w	r3, r3, #1440	; 0x5a0
 8000434:	6013      	str	r3, [r2, #0]
                       | DMA_CCR_MINC | DMA_CCR_CIRC;

    // Настроить мультиплексор каналов DMA
    DMAMUX1_Channel0->CCR |= (36 << DMAMUX_CxCR_DMAREQ_ID_Pos);
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <setup_adc_dma+0x68>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a0b      	ldr	r2, [pc, #44]	; (8000468 <setup_adc_dma+0x68>)
 800043c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8000440:	6013      	str	r3, [r2, #0]
    // Включить DMA
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <setup_adc_dma+0x60>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <setup_adc_dma+0x60>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6013      	str	r3, [r2, #0]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40020008 	.word	0x40020008
 8000464:	50000140 	.word	0x50000140
 8000468:	40020800 	.word	0x40020800

0800046c <adc_manually_get_data>:

void adc_manually_get_data()
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    // Начать считывание данных из АЦП
    ADC2->CR |= ADC_CR_ADSTART;
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <adc_manually_get_data+0x34>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <adc_manually_get_data+0x34>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6093      	str	r3, [r2, #8]

    // Подождать до завершения измерения
    while ( !(ADC2->ISR & ADC_ISR_EOS) ){}
 800047c:	bf00      	nop
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <adc_manually_get_data+0x34>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0308 	and.w	r3, r3, #8
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <adc_manually_get_data+0x12>

    // Сбросить флаг завершения измерения
    ADC2->ISR |= ADC_ISR_EOS;
 800048a:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <adc_manually_get_data+0x34>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <adc_manually_get_data+0x34>)
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	50000100 	.word	0x50000100

080004a4 <setup_clock>:

void setup_clock()
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    FLASH->ACR &= ~FLASH_ACR_LATENCY_Msk;
 80004a8:	4b25      	ldr	r3, [pc, #148]	; (8000540 <setup_clock+0x9c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a24      	ldr	r2, [pc, #144]	; (8000540 <setup_clock+0x9c>)
 80004ae:	f023 030f 	bic.w	r3, r3, #15
 80004b2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 80004b4:	4b22      	ldr	r3, [pc, #136]	; (8000540 <setup_clock+0x9c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a21      	ldr	r2, [pc, #132]	; (8000540 <setup_clock+0x9c>)
 80004ba:	f043 0302 	orr.w	r3, r3, #2
 80004be:	6013      	str	r3, [r2, #0]

    RCC->CR |= RCC_CR_HSEON;
 80004c0:	4b20      	ldr	r3, [pc, #128]	; (8000544 <setup_clock+0xa0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <setup_clock+0xa0>)
 80004c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004ca:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY) {}
 80004cc:	bf00      	nop
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <setup_clock+0xa0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80004da:	d1f8      	bne.n	80004ce <setup_clock+0x2a>

    RCC->PLLCFGR&=~(RCC_PLLCFGR_PLLR_Msk | RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk);
 80004dc:	4b19      	ldr	r3, [pc, #100]	; (8000544 <setup_clock+0xa0>)
 80004de:	68da      	ldr	r2, [r3, #12]
 80004e0:	4918      	ldr	r1, [pc, #96]	; (8000544 <setup_clock+0xa0>)
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <setup_clock+0xa4>)
 80004e4:	4013      	ands	r3, r2
 80004e6:	60cb      	str	r3, [r1, #12]

    RCC->PLLCFGR |= 2 << RCC_PLLCFGR_PLLR_Pos // Установка делителя R
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <setup_clock+0xa0>)
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	4915      	ldr	r1, [pc, #84]	; (8000544 <setup_clock+0xa0>)
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <setup_clock+0xa8>)
 80004f0:	4313      	orrs	r3, r2
 80004f2:	60cb      	str	r3, [r1, #12]
                    | RCC_PLLCFGR_PLLREN    // Включение R делителя PLL
                    | 15 << RCC_PLLCFGR_PLLN_Pos // Установка умножителя N
                    | 0 << RCC_PLLCFGR_PLLM_Pos // Установка делителя M
                    | RCC_PLLCFGR_PLLSRC_HSE; // HSE - источник сигнала для PLL

    RCC->CR |= RCC_CR_PLLON;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <setup_clock+0xa0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <setup_clock+0xa0>)
 80004fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004fe:	6013      	str	r3, [r2, #0]

    while ((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY){}
 8000500:	bf00      	nop
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <setup_clock+0xa0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800050a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800050e:	d1f8      	bne.n	8000502 <setup_clock+0x5e>

    RCC->CFGR |= RCC_CFGR_SW_Msk;
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <setup_clock+0xa0>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <setup_clock+0xa0>)
 8000516:	f043 0303 	orr.w	r3, r3, #3
 800051a:	6093      	str	r3, [r2, #8]
    RCC->CFGR &= ~(RCC_CFGR_SW_Msk ^ RCC_CFGR_SW_PLL);
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <setup_clock+0xa0>)
 800051e:	4a09      	ldr	r2, [pc, #36]	; (8000544 <setup_clock+0xa0>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	6093      	str	r3, [r2, #8]

    while ((RCC->CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL){}
 8000524:	bf00      	nop
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <setup_clock+0xa0>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f003 030c 	and.w	r3, r3, #12
 800052e:	2b0c      	cmp	r3, #12
 8000530:	d1f9      	bne.n	8000526 <setup_clock+0x82>
}
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40022000 	.word	0x40022000
 8000544:	40021000 	.word	0x40021000
 8000548:	f9ff800f 	.word	0xf9ff800f
 800054c:	05000f03 	.word	0x05000f03

08000550 <sleep>:

void sleep(uint16_t time)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	80fb      	strh	r3, [r7, #6]
	interrupt_counter = 1;
 800055a:	4b24      	ldr	r3, [pc, #144]	; (80005ec <sleep+0x9c>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]

	if(time == 0)
 8000560:	88fb      	ldrh	r3, [r7, #6]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d103      	bne.n	800056e <sleep+0x1e>
	{
		interrupt_counter = 0;
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <sleep+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e016      	b.n	800059c <sleep+0x4c>
	}
	else if(time == 1)
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d109      	bne.n	8000588 <sleep+0x38>
	{
	    TIM2->PSC = 9999;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	f242 720f 	movw	r2, #9999	; 0x270f
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
	    TIM2->ARR = 1;
 800057e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000582:	2201      	movs	r2, #1
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
 8000586:	e009      	b.n	800059c <sleep+0x4c>
	}
	else
	{
	    TIM2->PSC = 19999;
 8000588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
		TIM2->ARR = time - 1;
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800059a:	62da      	str	r2, [r3, #44]	; 0x2c
	}

    TIM2->CR1 |= TIM_CR1_CEN;
 800059c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]

    TIM2->SR &= ~ TIM_SR_UIF;
 80005ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6113      	str	r3, [r2, #16]

    while(interrupt_counter);
 80005bc:	bf00      	nop
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <sleep+0x9c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1fb      	bne.n	80005be <sleep+0x6e>

    TIM2->CR1 &= ~TIM_CR1_CEN;
 80005c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d0:	f023 0301 	bic.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]
    TIM2->CNT = 0;
 80005d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000020 	.word	0x20000020

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	; (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	; (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f811 	bl	8000644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff fe17 	bl	8000254 <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000634:	080006ac 	.word	0x080006ac
  ldr r2, =_sbss
 8000638:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800063c:	20000024 	.word	0x20000024

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <__libc_init_array>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	4d0d      	ldr	r5, [pc, #52]	; (800067c <__libc_init_array+0x38>)
 8000648:	4c0d      	ldr	r4, [pc, #52]	; (8000680 <__libc_init_array+0x3c>)
 800064a:	1b64      	subs	r4, r4, r5
 800064c:	10a4      	asrs	r4, r4, #2
 800064e:	2600      	movs	r6, #0
 8000650:	42a6      	cmp	r6, r4
 8000652:	d109      	bne.n	8000668 <__libc_init_array+0x24>
 8000654:	4d0b      	ldr	r5, [pc, #44]	; (8000684 <__libc_init_array+0x40>)
 8000656:	4c0c      	ldr	r4, [pc, #48]	; (8000688 <__libc_init_array+0x44>)
 8000658:	f000 f818 	bl	800068c <_init>
 800065c:	1b64      	subs	r4, r4, r5
 800065e:	10a4      	asrs	r4, r4, #2
 8000660:	2600      	movs	r6, #0
 8000662:	42a6      	cmp	r6, r4
 8000664:	d105      	bne.n	8000672 <__libc_init_array+0x2e>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f855 3b04 	ldr.w	r3, [r5], #4
 800066c:	4798      	blx	r3
 800066e:	3601      	adds	r6, #1
 8000670:	e7ee      	b.n	8000650 <__libc_init_array+0xc>
 8000672:	f855 3b04 	ldr.w	r3, [r5], #4
 8000676:	4798      	blx	r3
 8000678:	3601      	adds	r6, #1
 800067a:	e7f2      	b.n	8000662 <__libc_init_array+0x1e>
 800067c:	080006a4 	.word	0x080006a4
 8000680:	080006a4 	.word	0x080006a4
 8000684:	080006a4 	.word	0x080006a4
 8000688:	080006a8 	.word	0x080006a8

0800068c <_init>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr

08000698 <_fini>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	bf00      	nop
 800069c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	469e      	mov	lr, r3
 80006a2:	4770      	bx	lr
